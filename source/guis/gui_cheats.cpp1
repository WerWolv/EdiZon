#include "guis/gui_cheats.hpp"

#include <sstream>
#include <limits>
#include <utility>

#include <bits/stdc++.h>
#include <thread>

#include "helpers/util.h"

#include "edizon_logo_bin.h"

#define MAX_BUFFER_SIZE 0x1000000 // increase size for faster speed

static const std::vector<std::string> dataTypes = {"u8", "s8", "u16", "s16", "u32", "s32", "u64", "s64", "f32", "f64", "ptr"};
static const std::vector<u8> dataTypeSizes = {1, 1, 2, 2, 4, 4, 8, 8, 4, 8, 8};
static const std::vector<s128> dataTypeMaxValues = {std::numeric_limits<u8>::max(), std::numeric_limits<s8>::max(), std::numeric_limits<u16>::max(), std::numeric_limits<s16>::max(), std::numeric_limits<u32>::max(), std::numeric_limits<s32>::max(), std::numeric_limits<u64>::max(), std::numeric_limits<s64>::max(), std::numeric_limits<s32>::max(), std::numeric_limits<s64>::max(), std::numeric_limits<u64>::max()};
static const std::vector<s128> dataTypeMinValues = {std::numeric_limits<u8>::min(), std::numeric_limits<s8>::min(), std::numeric_limits<u16>::min(), std::numeric_limits<s16>::min(), std::numeric_limits<u32>::min(), std::numeric_limits<s32>::min(), std::numeric_limits<u64>::min(), std::numeric_limits<s64>::min(), std::numeric_limits<s32>::min(), std::numeric_limits<s64>::min(), std::numeric_limits<u64>::min()};

static std::string titleNameStr, tidStr, pidStr, buildIDStr;

static u32 cheatListOffset = 0;

static bool _isAddressFrozen(uintptr_t);
static std::string _getAddressDisplayString(u64, Debugger *debugger, searchType_t searchType);
static std::string _getValueDisplayString(searchValue_t searchValue, searchType_t searchType);
static void _moveLonelyCheats(u8 *buildID, u64 titleID);
static bool _wrongCheatsPresent(u8 *buildID, u64 titleID);

GuiCheats::GuiCheats() : Gui()
{

  // Check if dmnt:cht is running and we're not on sxos
  m_sysmodulePresent = isServiceRunning("dmnt:cht") && !(isServiceRunning("tx") && !isServiceRunning("rnx"));

  m_debugger = new Debugger();
  m_cheats = nullptr;
  m_memoryDump = nullptr;
  // start mod bookmark;
  m_memoryDumpBookmark = nullptr;
  m_memoryDump1 = nullptr;
  m_pointeroffsetDump = nullptr;

  m_searchValue[0]._u64 = 0;
  m_searchValue[1]._u64 = 0;
  m_searchType = SEARCH_TYPE_NONE;
  m_searchMode = SEARCH_MODE_NONE;
  m_searchRegion = SEARCH_REGION_NONE;

  m_cheatCnt = 0;

  if (!m_sysmodulePresent)
    return;

  dmntchtInitialize();
  dmntchtForceOpenCheatProcess();

  DmntCheatProcessMetadata metadata;
  dmntchtGetCheatProcessMetadata(&metadata);

  m_addressSpaceBaseAddr = metadata.address_space_extents.base;
  m_addressSpaceSize = metadata.address_space_extents.size;
  m_heapBaseAddr = metadata.heap_extents.base;
  m_mainBaseAddr = metadata.main_nso_extents.base;
  m_EditorBaseAddr = m_heapBaseAddr;

  m_heapSize = metadata.heap_extents.size;
  m_mainSize = metadata.main_nso_extents.size;

  if (m_mainBaseAddr < m_heapBaseAddr)
  {
    m_low_main_heap_addr = m_mainBaseAddr;
    m_high_main_heap_addr = m_heapBaseAddr + m_heapSize;
  }
  else
  {
    m_low_main_heap_addr = m_heapBaseAddr;
    m_high_main_heap_addr = m_mainBaseAddr + m_mainSize;
  }

  memcpy(m_buildID, metadata.main_nso_build_id, 0x20);

  _moveLonelyCheats(m_buildID, m_debugger->getRunningApplicationTID());

  dmntchtGetCheatCount(&m_cheatCnt);

  if (m_cheatCnt > 0)
  {
    m_cheats = new DmntCheatEntry[m_cheatCnt];
    dmntchtGetCheats(m_cheats, m_cheatCnt, 0, &m_cheatCnt);
  }
  else if (_wrongCheatsPresent(m_buildID, m_debugger->getRunningApplicationTID()))
    m_cheatsPresent = true;

  u64 frozenAddressCnt = 0;
  dmntchtGetFrozenAddressCount(&frozenAddressCnt);

  if (frozenAddressCnt != 0)
  {
    DmntFrozenAddressEntry frozenAddresses[frozenAddressCnt];
    dmntchtGetFrozenAddresses(frozenAddresses, frozenAddressCnt, 0, nullptr);

    for (u16 i = 0; i < frozenAddressCnt; i++)
      m_frozenAddresses.insert({frozenAddresses[i].address, frozenAddresses[i].value.value});
  }

  MemoryInfo meminfo = {0};
  u64 lastAddr = 0;

  do
  {
    lastAddr = meminfo.addr;
    meminfo = m_debugger->queryMemory(meminfo.addr + meminfo.size);

    m_memoryInfo.push_back(meminfo);
  } while (lastAddr < meminfo.addr + meminfo.size);

  for (MemoryInfo meminfo : m_memoryInfo)
  {
    if (m_mainBaseAddr == 0x00 && (meminfo.type == MemType_CodeStatic))
      m_mainBaseAddr = meminfo.addr;

    for (u64 addrOffset = meminfo.addr; addrOffset < meminfo.addr + meminfo.size; addrOffset += 0x20000000)
    {
      switch (meminfo.type)
      {
      case MemType_CodeStatic:
      case MemType_CodeMutable:
        m_memory[addrOffset / 0x20000000] = Gui::makeColor(0xFF, 0x00, 0x00, 0xFF);
        break;
      case MemType_SharedMem:
        m_memory[addrOffset / 0x20000000] = Gui::makeColor(0x00, 0xFF, 0x00, 0xFF);
        break;
      case MemType_Heap:
        m_memory[addrOffset / 0x20000000] = Gui::makeColor(0x00, 0x00, 0xFF, 0xFF);
        break;
      case MemType_KernelStack:
      case MemType_ThreadLocal:
        m_memory[addrOffset / 0x20000000] = Gui::makeColor(0xFF, 0xFF, 0x00, 0xFF);
        break;
      case MemType_Unmapped:
        break;
      default:
        m_memory[addrOffset / 0x20000000] = Gui::makeColor(0x80, 0x80, 0x80, 0xFF);
        break;
      }
    }
  }

  //BM Begin pointer search init

  // MemoryDump *m_pointeroffsetDump = new MemoryDump(EDIZON_DIR "/pointerdump1.dat", DumpType::POINTER, false);
  // m_pointeroffsetDump->setPointerSearchParams(m_max_depth, m_numoffset, m_maxrange, m_buildID);

  m_memoryDump = new MemoryDump(EDIZON_DIR "/memdump1.dat", DumpType::UNDEFINED, false);
  // start mod make list of memory found toggle between current find and bookmark
  m_memoryDumpBookmark = new MemoryDump(EDIZON_DIR "/memdumpbookmark.dat", DumpType::ADDR, false);
  m_AttributeDumpBookmark = new MemoryDump(EDIZON_DIR "/attdumpbookmark.dat", DumpType::ADDR, false);
  // end mod

  if (m_debugger->getRunningApplicationPID() == 0 || m_memoryDump->getDumpInfo().heapBaseAddress != m_heapBaseAddr)
  {
    m_memoryDump->clear();

    remove(EDIZON_DIR "/memdump2.dat");
    remove(EDIZON_DIR "/memdump3.dat");

    m_searchType = SEARCH_TYPE_NONE;
    m_searchRegion = SEARCH_REGION_NONE;
    m_searchValue[0]._u64 = 0;
    m_searchValue[1]._u64 = 0;
  }
  else
  {
    m_searchType = m_memoryDump->getDumpInfo().searchDataType;
    m_searchRegion = m_memoryDump->getDumpInfo().searchRegion;
    m_searchMode = m_memoryDump->getDumpInfo().searchMode;
    m_searchValue[0] = m_memoryDump->getDumpInfo().searchValue[0];
    m_searchValue[1] = m_memoryDump->getDumpInfo().searchValue[1];
  }

  m_memoryDump->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);

  // start mod bookmark

  if (m_debugger->getRunningApplicationPID() == 0 || m_memoryDumpBookmark->getDumpInfo().heapBaseAddress != m_heapBaseAddr)
  {
    m_memoryDumpBookmark->clear();
    m_AttributeDumpBookmark->clear();
    delete m_memoryDumpBookmark;
    delete m_AttributeDumpBookmark;
    m_memoryDumpBookmark = new MemoryDump(EDIZON_DIR "/memdumpbookmark.dat", DumpType::ADDR, true);
    m_AttributeDumpBookmark = new MemoryDump(EDIZON_DIR "/attdumpbookmark.dat", DumpType::ADDR, true);
    m_memoryDumpBookmark->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
    m_AttributeDumpBookmark->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
    //    m_memoryDumpBookmark->setSearchParams(searchType, searchMode, searchRegion, searchValue1, searchValue2);
  }
  else
    m_memoryDumpBookmark->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
  // end mod
  std::stringstream ss;

  // check this
  printf("%s\n", "before part");
  if (m_debugger->getRunningApplicationTID() != 0)
  {
    if (Title::g_titles[m_debugger->getRunningApplicationTID()]->getTitleName().length() < 24)
      ss << Title::g_titles[m_debugger->getRunningApplicationTID()]->getTitleName();
    else
      ss << Title::g_titles[m_debugger->getRunningApplicationTID()]->getTitleName().substr(0, 21) << "...";
    titleNameStr = ss.str();
    ss.str("");
  }
  else
    titleNameStr = "Unknown title name!";
  printf("%s\n", "after part");
  ss << "TID: " << std::uppercase << std::hex << std::setfill('0') << std::setw(sizeof(u64) * 2) << m_debugger->getRunningApplicationTID();
  tidStr = ss.str();
  ss.str("");

  ss << "PID: " << std::dec << m_debugger->getRunningApplicationPID();
  pidStr = ss.str();
  ss.str("");

  ss << "BID: ";
  for (u8 i = 0; i < 8; i++)
    ss << std::nouppercase << std::hex << std::setfill('0') << std::setw(2) << (u16)m_buildID[i];

  buildIDStr = ss.str();

  if (m_cheatCnt == 0)
    m_menuLocation = CANDIDATES;
  if (m_memoryDump->size() == 0)
    m_menuLocation = CHEATS;

  appletSetMediaPlaybackState(true);
}

GuiCheats::~GuiCheats()
{

  if (m_debugger != nullptr)
  {
    delete m_debugger;
  }

  if (m_memoryDump1 != nullptr)
    delete m_memoryDump1;

  if (m_memoryDumpBookmark != nullptr)
    delete m_memoryDumpBookmark;

  if (m_cheats != nullptr)
    delete[] m_cheats;

  if (m_sysmodulePresent)
  {
    dmntchtExit();
  }

  setLedState(false);
  appletSetMediaPlaybackState(false);

  printf("%s\n", "~GuiCheats()");
}

void GuiCheats::update()
{
  Gui::update();
}

void GuiCheats::draw()
{
  static u32 splashCnt = 0;
  std::stringstream ss;

  Gui::beginDraw();

#if SPLASH_ENABLED

  if (!Gui::g_splashDisplayed)
  {
    Gui::drawRectangle(0, 0, Gui::g_framebuffer_width, Gui::g_framebuffer_height, Gui::makeColor(0x5D, 0x4F, 0x4E, 0xFF));
    Gui::drawImage(Gui::g_framebuffer_width / 2 - 128, Gui::g_framebuffer_height / 2 - 128, 256, 256, edizon_logo_bin, IMAGE_MODE_BGR24);

    if (splashCnt++ >= 70)
      Gui::g_splashDisplayed = true;

    Gui::endDraw();
    return;
  }

#endif

  Gui::drawRectangle(0, 0, Gui::g_framebuffer_width, Gui::g_framebuffer_height, currTheme.backgroundColor);

  Gui::drawRectangle((u32)((Gui::g_framebuffer_width - 1220) / 2), Gui::g_framebuffer_height - 73, 1220, 1, currTheme.textColor);

  if (m_debugger->getRunningApplicationPID() == 0)
  {
    Gui::drawTextAligned(fontHuge, Gui::g_framebuffer_width / 2, Gui::g_framebuffer_height / 2 - 100, currTheme.textColor, "\uE12C", ALIGNED_CENTER);
    Gui::drawTextAligned(font20, Gui::g_framebuffer_width / 2, Gui::g_framebuffer_height / 2, currTheme.textColor, "A title needs to be running in the background to use the RAM editor. \n Please launch an application and try again.", ALIGNED_CENTER);
    Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E1 Back", ALIGNED_RIGHT);
    Gui::endDraw();
    return;
  }
  else if (!m_sysmodulePresent)
  {
    Gui::drawTextAligned(fontHuge, Gui::g_framebuffer_width / 2, Gui::g_framebuffer_height / 2 - 100, currTheme.textColor, "\uE142", ALIGNED_CENTER);
    Gui::drawTextAligned(font20, Gui::g_framebuffer_width / 2, Gui::g_framebuffer_height / 2, currTheme.textColor, "EdiZon depends on Atmosphere's dmnt:cht service which doesn't seem to be \n running on this device. Please install a supported CFW to \n use the cheat engine.", ALIGNED_CENTER);
    Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E1 Back", ALIGNED_RIGHT);
    Gui::endDraw();
    return;
  }

  if (m_memoryDump1 == nullptr)
  {
    if (m_memoryDump->size() == 0)
    {
      if (m_frozenAddresses.size() != 0)
        Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0F0 Frozen es     \uE0E3 Search RAM     \uE0E1 Back", ALIGNED_RIGHT);
      else
        Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E4 BM toggle      \uE0E3 Search RAM     \uE0E1 Back", ALIGNED_RIGHT);
      // Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E4 E4 \uE0E5 E5 \uE0E6 E6 \uE0E7 E7 \uE0E8 E8 \uE0E9 E9 \uE0EA EA \uE0EF EF \uE0F0 F0 \uE0F1 F1 \uE0F2 F2 \uE0F3 F3 \uE0F4 F4 \uE0F5 F5 ", ALIGNED_RIGHT);
      // Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E1 E1 \uE0E0 E0 \uE0E1 E1 \uE0E2 E2 \uE0E3 E3 \uE0D9 D9 \uE0DA DA \uE0DF DF \uE0F0 F0 \uE0F6 F6 \uE0F7 F7 \uE0F8 F8 \uE0F9 F9 \uE0FA FA ", ALIGNED_RIGHT);
    }
    else
    {
      if (m_memoryDump->size() > 0)
      {
        Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E4 BM toggle \uE0EF BM add \uE0F0 Reset search \uE0E3 Search again \uE0E2 Freeze value  \uE0E0 Edit value   \uE0E1 Back", ALIGNED_RIGHT);
      }
      else
        Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0F0 Reset search     \uE0E1 Back", ALIGNED_RIGHT);
    }
  }
  else
  {
    if (m_memoryDumpBookmark->size() > 0)
    {
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E4 BM toggle   \uE0EF BM label  \uE0E3 Delete BM   \uE0E2 Freeze value  \uE0E0 Edit value   \uE0E1 Back", ALIGNED_RIGHT);
    }
    else
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 50, Gui::g_framebuffer_height - 50, currTheme.textColor, "\uE0E4 BM toggle \uE0E1 Back", ALIGNED_RIGHT);
  }

  Gui::drawRectangle(256, 50, Gui::g_framebuffer_width - 256, 206, currTheme.separatorColor);

  // Don't draw icon
  if (m_debugger->getRunningApplicationTID() != 0)
    Gui::drawImage(0, 0, 256, 256, Title::g_titles[m_debugger->getRunningApplicationTID()]->getTitleIcon(), IMAGE_MODE_RGB24);
  else
    Gui::drawRectangle(0, 0, 256, 256, Gui::makeColor(0x00, 0x00, 0xFF, 0xFF));

  Gui::drawRectangle(660, 65, 20, 20, Gui::makeColor(0xFF, 0x00, 0x00, 0xFF));  // Code
  Gui::drawRectangle(660, 85, 20, 20, Gui::makeColor(0x00, 0xFF, 0x00, 0xFF));  // Shared Memory
  Gui::drawRectangle(660, 105, 20, 20, Gui::makeColor(0x00, 0x00, 0xFF, 0xFF)); // Heap
  Gui::drawRectangle(660, 125, 20, 20, Gui::makeColor(0xFF, 0xFF, 0x00, 0xFF)); // Stack
  Gui::drawRectangle(660, 145, 20, 20, Gui::makeColor(0x80, 0x80, 0x80, 0xFF)); // Others

  Gui::drawTextAligned(font14, 700, 62, currTheme.textColor, "Code", ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 700, 82, currTheme.textColor, "Shared Memory", ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 700, 102, currTheme.textColor, "Heap", ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 700, 122, currTheme.textColor, "Stack", ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 700, 142, currTheme.textColor, "Others", ALIGNED_LEFT);

  ss.str("");
  ss << "BASE  :  0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_addressSpaceBaseAddr; //metadata.address_space_extents.size
  ss << " - 0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_addressSpaceBaseAddr + m_addressSpaceSize;
  Gui::drawTextAligned(font14, 900, 75, currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);
  ss.str("");
  ss << "HEAP  :  0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_heapBaseAddr;
  ss << " - 0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_heapBaseAddr + m_heapSize;
  Gui::drawTextAligned(font14, 900, 105, currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);
  ss.str("");
  ss << "MAIN  :  0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_mainBaseAddr;
  ss << " - 0x" << std::uppercase << std::setfill('0') << std::setw(10) << std::hex << m_mainBaseAddr + m_mainSize;
  Gui::drawTextAligned(font14, 900, 135, currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);

  Gui::drawRectangle(256, 50, 394, 137, COLOR_WHITE);

  Gui::drawTextAligned(font20, 280, 70, COLOR_BLACK, titleNameStr.c_str(), ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 290, 110, COLOR_BLACK, tidStr.c_str(), ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 290, 130, COLOR_BLACK, pidStr.c_str(), ALIGNED_LEFT);
  Gui::drawTextAligned(font14, 290, 150, COLOR_BLACK, buildIDStr.c_str(), ALIGNED_LEFT);

  if ((Account::g_activeUser.uid[0] != 0) && (Account::g_activeUser.uid[1] != 0))
  {
    ss.str("");
    ss << Account::g_accounts[Account::g_activeUser]->getUserName() << " [ " << std::hex << (Account::g_activeUser.uid[1]) << " " << (Account::g_activeUser.uid[0]) << " ]";
    Gui::drawTextAligned(font20, 768, 205, currTheme.textColor, ss.str().c_str(), ALIGNED_CENTER);
  }

  if (m_cheatCnt > 0)
  {
    Gui::drawRectangle(50, 256, 650, 46 + std::min(static_cast<u32>(m_cheatCnt), 8U) * 40, currTheme.textColor);
    Gui::drawTextAligned(font14, 375, 262, currTheme.backgroundColor, "Cheats", ALIGNED_CENTER);
    Gui::drawShadow(50, 256, 650, 46 + std::min(static_cast<u32>(m_cheatCnt), 8U) * 40);

    for (u8 line = cheatListOffset; line < 8 + cheatListOffset; line++)
    {
      if (line >= m_cheatCnt)
        break;

      ss.str("");
      ss << "\uE070   " << m_cheats[line].definition.readable_name;

      Gui::drawRectangle(52, 300 + (line - cheatListOffset) * 40, 646, 40, (m_selectedEntry == line && m_menuLocation == CHEATS) ? currTheme.highlightColor : line % 2 == 0 ? currTheme.backgroundColor : currTheme.separatorColor);
      Gui::drawTextAligned(font14, 70, 305 + (line - cheatListOffset) * 40, (m_selectedEntry == line && m_menuLocation == CHEATS) ? COLOR_BLACK : currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);

      if (!m_cheats[line].enabled)
      {
        color_t highlightColor = currTheme.highlightColor;
        highlightColor.a = 0xFF;

        Gui::drawRectangled(74, 313 + (line - cheatListOffset) * 40, 10, 10, (m_selectedEntry == line && m_menuLocation == CHEATS) ? highlightColor : line % 2 == 0 ? currTheme.backgroundColor : currTheme.separatorColor);
      }
    }
  }
  else if (m_cheatsPresent && m_memoryDump->size() == 0)
    Gui::drawTextAligned(font24, Gui::g_framebuffer_width / 2, Gui::g_framebuffer_height / 2 + 50, currTheme.textColor, "Cheats for this game present but title version or region doesn't match!", ALIGNED_CENTER);

  if (m_memoryDump->getDumpInfo().dumpType == DumpType::DATA)
  {
    if (m_memoryDump->size() > 0)
    {
      Gui::drawRectangle(Gui::g_framebuffer_width - 552, 256, 500, 366, currTheme.textColor);
      Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 302, 262, currTheme.backgroundColor, "Found candidates", ALIGNED_CENTER);
      Gui::drawShadow(Gui::g_framebuffer_width - 552, 256, 500, 366 * 40);
      Gui::drawRectangle(Gui::g_framebuffer_width - 550, 300, 496, 320, currTheme.separatorColor);

      ss.str("");
      ss << (static_cast<double>(m_memoryDump->size()) / (0x100000)) << "MB dumped";
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 302, 450, currTheme.textColor, ss.str().c_str(), ALIGNED_CENTER);
    }
  }
  else if (m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
  {
    if (m_memoryDump->size() > 0)
    {
      if (m_memoryDump1 == nullptr)
      {
        Gui::drawRectangle(Gui::g_framebuffer_width - 552, 256, 500, 46 + std::min(static_cast<u32>(m_memoryDump->size() / sizeof(u64)), 8U) * 40, currTheme.textColor);
        ss.str("");
        ss << "Found candidates   " << std::dec << (((m_menuLocation == CANDIDATES) ? m_selectedEntry : 0) + m_addresslist_offset + 1) << " / " << std::dec << ((m_memoryDump->size() / sizeof(u64)));
        Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 302, 262, currTheme.backgroundColor, ss.str().c_str(), ALIGNED_CENTER);
        Gui::drawShadow(Gui::g_framebuffer_width - 552, 256, 500, 46 + std::min(static_cast<u32>(m_memoryDump->size() / sizeof(u64)), 8U) * 40);
      }
      else
      {
        Gui::drawRectangle(Gui::g_framebuffer_width - 557, 256, 549, 46 + std::min(static_cast<u32>(m_memoryDump->size() / sizeof(u64)), 8U) * 40, currTheme.textColor);
        ss.str("");
        ss << "   Book Marks   " << std::dec << (((m_menuLocation == CANDIDATES) ? m_selectedEntry : 0) + m_addresslist_offset + 1) << " / " << std::dec << ((m_memoryDump->size() / sizeof(u64)));
        Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 302, 262, currTheme.backgroundColor, ss.str().c_str(), ALIGNED_CENTER);
        // Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 302, 262, currTheme.backgroundColor, "Book Marks", ALIGNED_CENTER);
        Gui::drawShadow(Gui::g_framebuffer_width - 557, 256, 549, 46 + std::min(static_cast<u32>(m_memoryDump->size() / sizeof(u64)), 8U) * 40);
      }
    }
    // mod start memory line offset

    if (m_memoryDump1 == nullptr)
      for (u8 line = 0; line < 8; line++)
      {
        if ((line + m_addresslist_offset) >= (m_memoryDump->size() / sizeof(u64)))
          break;

        ss.str("");

        if (line < 8) // && (m_memoryDump->size() / sizeof(u64)) != 8)
        {
          u64 address = 0;
          m_memoryDump->getData((line + m_addresslist_offset) * sizeof(u64), &address, sizeof(u64));
          // candidate display
          if (address >= m_memoryDump->getDumpInfo().heapBaseAddress && address < (m_memoryDump->getDumpInfo().heapBaseAddress + m_memoryDump->getDumpInfo().heapSize))
            ss << "[ HEAP + 0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address - m_memoryDump->getDumpInfo().heapBaseAddress) << " ]";
          else if (address >= m_memoryDump->getDumpInfo().mainBaseAddress && address < (m_memoryDump->getDumpInfo().mainBaseAddress + m_memoryDump->getDumpInfo().mainSize))
            ss << "[ MAIN + 0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address - m_memoryDump->getDumpInfo().mainBaseAddress) << " ]";
          else
            ss << "[ BASE + 0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address - m_memoryDump->getDumpInfo().addrSpaceBaseAddress) << " ]";

          ss << "  ( " << _getAddressDisplayString(address, m_debugger, (searchType_t)m_searchType) << " )";

          if (m_frozenAddresses.find(address) != m_frozenAddresses.end())
            ss << "   \uE130";
        }
        else
          ss << "And " << std::dec << ((m_memoryDump->size() / sizeof(u64)) - 8) << " others...";

        Gui::drawRectangle(Gui::g_framebuffer_width - 550, 300 + line * 40, 496, 40, (m_selectedEntry == line && m_menuLocation == CANDIDATES) ? currTheme.highlightColor : line % 2 == 0 ? currTheme.backgroundColor : currTheme.separatorColor);
        Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 530, 305 + line * 40, (m_selectedEntry == line && m_menuLocation == CANDIDATES) ? COLOR_BLACK : currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);
      }
    else // Book mark screen
      for (u8 line = 0; line < 8; line++)
      {
        if ((line + m_addresslist_offset) >= (m_memoryDump->size() / sizeof(u64)))
          break;

        ss.str("");

        bookmark_t bookmark;
        if (line < 8) // && (m_memoryDump->size() / sizeof(u64)) != 8)
        {
          u64 address = 0;
          m_memoryDump->getData((line + m_addresslist_offset) * sizeof(u64), &address, sizeof(u64));
          m_AttributeDumpBookmark->getData((line + m_addresslist_offset) * sizeof(bookmark_t), &bookmark, sizeof(bookmark_t));
          // bookmark display

          ss << "[0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address) << "]"; //<< std::left << std::setfill(' ') << std::setw(18) << bookmark.label <<

          ss << "  ( " << _getAddressDisplayString(address, m_debugger, (searchType_t)bookmark.type) << " )";

          if (m_frozenAddresses.find(address) != m_frozenAddresses.end())
            ss << " \uE130";
        }
        else
          ss << "And " << std::dec << ((m_memoryDump->size() / sizeof(u64)) - 8) << " others...";

        Gui::drawRectangle(Gui::g_framebuffer_width - 555, 300 + line * 40, 545, 40, (m_selectedEntry == line && m_menuLocation == CANDIDATES) ? currTheme.highlightColor : line % 2 == 0 ? currTheme.backgroundColor : currTheme.separatorColor);
        Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 545, 305 + line * 40, (m_selectedEntry == line && m_menuLocation == CANDIDATES) ? COLOR_BLACK : currTheme.textColor, bookmark.label, ALIGNED_LEFT);
        Gui::drawTextAligned(font14, Gui::g_framebuffer_width - 340, 305 + line * 40, (m_selectedEntry == line && m_menuLocation == CANDIDATES) ? COLOR_BLACK : currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);
      }
  }

  Gui::drawShadow(0, 0, Gui::g_framebuffer_width, 256);
  Gui::drawShadow(256, 50, Gui::g_framebuffer_width, 136);

  for (u16 x = 0; x < 1024; x++)
    Gui::drawRectangle(256 + x, 0, 2, 50, m_memory[x]);

  drawSearchRAMMenu();
  drawEditRAMMenu();
  Gui::endDraw();
}
// BM2
void GuiCheats::drawEditRAMMenu()
{
  static u32 cursorBlinkCnt = 0;
  u32 strWidth = 0;
  std::stringstream ss;

  if (m_searchMenuLocation != SEARCH_editRAM) // need
    return;

  Gui::drawRectangled(0, 0, Gui::g_framebuffer_width, Gui::g_framebuffer_height, Gui::makeColor(0x00, 0x00, 0x00, 0xA0));

  Gui::drawRectangle(50, 50, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.backgroundColor);
  Gui::drawRectangle(100, 135, Gui::g_framebuffer_width - 200, 1, currTheme.textColor);
  Gui::drawText(font24, 120, 70, currTheme.textColor, "\uE132   Edit Memory");
  Gui::drawTextAligned(font20, 100, 160, currTheme.textColor, "\uE149 \uE0A4", ALIGNED_LEFT);
  Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, 160, currTheme.textColor, "\uE0A5 \uE14A", ALIGNED_RIGHT);
  Gui::drawTextAligned(font20, 260, 160, m_searchMenuLocation == SEARCH_TYPE ? currTheme.selectedColor : currTheme.textColor, "U8", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 510, 160, m_searchMenuLocation == SEARCH_MODE ? currTheme.selectedColor : currTheme.textColor, "U16", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 760, 160, m_searchMenuLocation == SEARCH_REGION ? currTheme.selectedColor : currTheme.textColor, "u32", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 1010, 160, m_searchMenuLocation == SEARCH_VALUE ? currTheme.selectedColor : currTheme.textColor, "u64", ALIGNED_CENTER);

  // strcpy(initialString, _getAddressDisplayString(address, m_debugger, m_searchType).c_str());
  // ss << "[ HEAP + 0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address - m_memoryDump->getDumpInfo().heapBaseAddress) << " ]";
  // std::stringstream ss;
  //
  // dmntchtReadCheatProcessMemory(addr, &out, sizeof(u32));
  // address = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20 + (m_selectedEntry -1 - (m_selectedEntry div 5))*4;
  // m_selectedEntry = (m_EditorBaseAddr % 10) / 4 + 11;
  u64 addr = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20;
  u32 out;

  u64 address = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20 + (m_selectedEntry - 1 - (m_selectedEntry / 5)) * 4 + m_addressmod;
  ss.str("");
  ss << "[ " << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (address) << " ]";
  Gui::drawText(font24, 520, 70, currTheme.textColor, ss.str().c_str());
  // Next to display the value in the selected type now is u32 in hex
  ss.str("");
  dmntchtReadCheatProcessMemory(address, &out, sizeof(u32));
  // ss << "0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(8) << out << "";
  Gui::drawText(font24, 820, 70, currTheme.textColor, _getAddressDisplayString(address, m_debugger, m_searchType).c_str()); //ss.str().c_str()

  for (u8 i = 0; i < 40; i++)
  {
    if (m_selectedEntry == i)
      Gui::drawRectangled(88 + (i % 5) * 225, 235 + (i / 5) * 50, 225, 50, m_searchMode == static_cast<searchMode_t>(i) ? currTheme.selectedColor : currTheme.highlightColor);
    if ((i % 5) != 0)
    {
      Gui::drawRectangled(93 + (i % 5) * 225, 240 + (i / 5) * 50, 215, 40, currTheme.separatorColor);
      ss.str("");
      dmntchtReadCheatProcessMemory(addr, &out, sizeof(u32));
      ss << "0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(8) << out << "";
      Gui::drawTextAligned(font20, 200 + (i % 5) * 225, 245 + (i / 5) * 50, currTheme.textColor, ss.str().c_str(), ALIGNED_CENTER);
      addr += 4;
    }
    else
    {
      ss.str("");
      ss << "[ " << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (addr) << " ]";
      Gui::drawTextAligned(font20, 200 + (i % 5) * 225, 245 + (i / 5) * 50, currTheme.textColor, ss.str().c_str(), ALIGNED_CENTER);
    }
  }
}

void GuiCheats::drawSearchRAMMenu()
{
  static u32 cursorBlinkCnt = 0;
  u32 strWidth = 0;
  std::stringstream ss;

  if (m_searchMenuLocation == SEARCH_NONE)
    return;

  Gui::drawRectangled(0, 0, Gui::g_framebuffer_width, Gui::g_framebuffer_height, Gui::makeColor(0x00, 0x00, 0x00, 0xA0));

  Gui::drawRectangle(50, 50, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.backgroundColor);
  Gui::drawRectangle(100, 135, Gui::g_framebuffer_width - 200, 1, currTheme.textColor);
  Gui::drawText(font24, 120, 70, currTheme.textColor, "\uE132   Search Memory");

  Gui::drawTextAligned(font20, 100, 160, currTheme.textColor, "\uE149 \uE0A4", ALIGNED_LEFT);
  Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, 160, currTheme.textColor, "\uE0A5 \uE14A", ALIGNED_RIGHT);

  Gui::drawTextAligned(font20, 260, 160, m_searchMenuLocation == SEARCH_TYPE ? currTheme.selectedColor : currTheme.textColor, "TYPE", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 510, 160, m_searchMenuLocation == SEARCH_MODE ? currTheme.selectedColor : currTheme.textColor, "MODE", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 760, 160, m_searchMenuLocation == SEARCH_REGION ? currTheme.selectedColor : currTheme.textColor, "REGION", ALIGNED_CENTER);
  Gui::drawTextAligned(font20, 1010, 160, m_searchMenuLocation == SEARCH_VALUE ? currTheme.selectedColor : currTheme.textColor, "VALUE", ALIGNED_CENTER);

  static const char *const typeNames[] = {"u8", "s8", "u16", "s16", "u32", "s32", "u64", "s64", "flt", "dbl", "void*"};
  static const char *const modeNames[] = {"==", "!=", ">", "StateB", "<", "StateA", "A..B", "SAME", "DIFF", "+ +", "- -", "PTR"};
  static const char *const regionNames[] = {"HEAP", "MAIN", "HEAP + MAIN", "RAM"};

  switch (m_searchMenuLocation)
  {
  case SEARCH_TYPE:
    for (u8 i = 0; i < 11; i++)
    {
      if (m_selectedEntry == i)
        Gui::drawRectangled(356 + (i / 2) * 100, 220 + (i % 2) * 100, 90, 90, m_searchType == static_cast<searchType_t>(i) ? currTheme.selectedColor : currTheme.highlightColor);

      Gui::drawRectangled(361 + (i / 2) * 100, 225 + (i % 2) * 100, 80, 80, currTheme.separatorColor);
      Gui::drawTextAligned(font20, 400 + (i / 2) * 100, 250 + (i % 2) * 100, currTheme.textColor, typeNames[i], ALIGNED_CENTER);
    }

    Gui::drawTextAligned(font14, Gui::g_framebuffer_width / 2, 500, currTheme.textColor, "Set the data type of the value you’re searching here. The prefix [u] means unsigned (positive integers), [s] means \n"
                                                                                         "signed (positive and negative integers), [flt] is for floating point numbers (rational numbers), [dbl] is for double (bigger \n"
                                                                                         "rational numbers) and [void*] stands for pointer (link to another memory ) which is useful for creating cheats. The \n"
                                                                                         "number that follows is the number of bits used in memory which determines the maximum value. Choose the data type that \n"
                                                                                         "best fits for the type of data you’re looking for.",
                         ALIGNED_CENTER);

    Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.textColor, "\uE0E1 Back     \uE0E0 OK", ALIGNED_RIGHT);

    break;
  case SEARCH_MODE:
    for (u8 i = 0; i < 12; i++)
    {
      if (m_selectedEntry == i)
        Gui::drawRectangled(356 + (i / 2) * 100, 220 + (i % 2) * 100, 90, 90, m_searchMode == static_cast<searchMode_t>(i) ? currTheme.selectedColor : currTheme.highlightColor);

      Gui::drawRectangled(361 + (i / 2) * 100, 225 + (i % 2) * 100, 80, 80, currTheme.separatorColor);
      Gui::drawTextAligned(font20, 400 + (i / 2) * 100, 250 + (i % 2) * 100, currTheme.textColor, modeNames[i], ALIGNED_CENTER);
    }

    Gui::drawTextAligned(font14, Gui::g_framebuffer_width / 2, 500, currTheme.textColor, "Set the mode you want to use for finding values. With these modes EdiZon will search for values that are equal to [==], \n"
                                                                                         "not equal to [!=], greater than [>], greater than or equal to [>=], less than [<], or less than or equal to [<=] the value \n"
                                                                                         "that you input. [A : B] allows you to set a (min : max) range of values, SAME and DIFF search allows you to find values that \n"
                                                                                         "stayed the same or changed since the last search, [+ +] and [- -] checks for values that increased or decreased since the \n"
                                                                                         "previous search.",
                         ALIGNED_CENTER);

    Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.textColor, "\uE0E1 Back     \uE0E0 OK", ALIGNED_RIGHT);
    break;
  case SEARCH_REGION:
    for (u8 i = 0; i < 4; i++)
    {
      if (m_selectedEntry == i)
        Gui::drawRectangled((Gui::g_framebuffer_width / 2) - 155, 215 + i * 70, 310, 70, m_searchRegion == static_cast<searchRegion_t>(i) ? currTheme.selectedColor : currTheme.highlightColor);

      Gui::drawRectangled((Gui::g_framebuffer_width / 2) - 150, 220 + i * 70, 300, 60, currTheme.separatorColor);
      Gui::drawTextAligned(font20, (Gui::g_framebuffer_width / 2), 235 + i * 70, currTheme.textColor, regionNames[i], ALIGNED_CENTER);
    }

    Gui::drawTextAligned(font14, Gui::g_framebuffer_width / 2, 500, currTheme.textColor, "Set the memory region you want to search in. HEAP contains dynamically allocated values and will be where the majority of \n"
                                                                                         "values worth changing will be found. MAIN contains global variables and instructions for game operation. You may find some \n"
                                                                                         "values here but it’s mainly for finding pointers to HEAP values or changing game code. RAM will search the entirety of the Games \n"
                                                                                         "used memory including memory shared memory and resources. Should only be used as a final resort as this will be extremely slow. \n",
                         ALIGNED_CENTER);

    Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.textColor, "\uE0E1 Back     \uE0E0 OK", ALIGNED_RIGHT);
    break;
  case SEARCH_VALUE:
    Gui::drawTextAligned(font14, Gui::g_framebuffer_width / 2, 500, currTheme.textColor, "Set the value you want to search for. The value(s) you enter here will depend on what options you've chosen in the \n"
                                                                                         "first three sections. Either it's the exact integer you want to search for, a floating point number or even two values that \n"
                                                                                         "will be used as range.",
                         ALIGNED_CENTER);

    //Gui::drawRectangle(300, 250, Gui::g_framebuffer_width - 600, 80, currTheme.separatorColor);
    Gui::drawRectangle(300, 327, Gui::g_framebuffer_width - 600, 3, currTheme.textColor);
    if (m_searchValueFormat == FORMAT_DEC)
      ss << _getValueDisplayString(m_searchValue[0], m_searchType);
    else if (m_searchValueFormat == FORMAT_HEX)
      ss << "0x" << std::uppercase << std::hex << m_searchValue[0]._u64;

    Gui::getTextDimensions(font20, ss.str().c_str(), &strWidth, nullptr);
    Gui::drawTextAligned(font20, 310, 285, currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);

    //	Start Mod for search Range display
    if (cursorBlinkCnt++ % 20 > 10 && m_selectedEntry == 0 && (m_searchValueIndex == 0))
      Gui::drawRectangled(312 + strWidth, 285, 3, 35, currTheme.highlightColor);

    if (m_searchMode == SEARCH_MODE_RANGE)
    {
      ss.str("");
      if (m_searchValueFormat == FORMAT_DEC)
        ss << _getValueDisplayString(m_searchValue[1], m_searchType);
      else if (m_searchValueFormat == FORMAT_HEX)
        ss << "0x" << std::uppercase << std::hex << m_searchValue[1]._u64;
      Gui::getTextDimensions(font20, ss.str().c_str(), &strWidth, nullptr);
      Gui::drawTextAligned(font20, 650, 285, currTheme.textColor, ss.str().c_str(), ALIGNED_LEFT);
    }

    if (cursorBlinkCnt++ % 20 > 10 && m_selectedEntry == 0 && (m_searchValueIndex == 1))
      Gui::drawRectangled(652 + strWidth, 285, 3, 35, currTheme.highlightColor);
    //	End Mod

    if (m_searchValueFormat == FORMAT_DEC)
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.textColor, "\uE0E2 Hexadecimal view     \uE0E1 Back     \uE0E0 OK", ALIGNED_RIGHT);
    else if (m_searchValueFormat == FORMAT_HEX)
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width - 100, Gui::g_framebuffer_height - 100, currTheme.textColor, "\uE0E2 Decimal view     \uE0E1 Back     \uE0E0 OK", ALIGNED_RIGHT);

    if (m_selectedEntry == 1)
      Gui::drawRectangled(Gui::g_framebuffer_width / 2 - 155, 345, 310, 90, currTheme.highlightColor);

    if (m_searchType != SEARCH_TYPE_NONE && m_searchMode != SEARCH_MODE_NONE && m_searchRegion != SEARCH_REGION_NONE)
    {
      Gui::drawRectangled(Gui::g_framebuffer_width / 2 - 150, 350, 300, 80, currTheme.selectedColor);
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width / 2, 375, currTheme.backgroundColor, "Search Now!", ALIGNED_CENTER);
    }
    else
    {
      Gui::drawRectangled(Gui::g_framebuffer_width / 2 - 150, 350, 300, 80, currTheme.selectedButtonColor);
      Gui::drawTextAligned(font20, Gui::g_framebuffer_width / 2, 375, currTheme.separatorColor, "Search Now!", ALIGNED_CENTER);
    }

    break;
  case SEARCH_NONE:
    break;
  }
}

void GuiCheats::onInput(u32 kdown)
{
  if (kdown & KEY_B)
  {

    if (m_searchMenuLocation == SEARCH_NONE)
    {
      // Gui::g_nextGui = GUI_MAIN;
      Gui::g_requestExit = true;
      return;
    }
    else if (m_searchMenuLocation == SEARCH_editRAM)
    {
      m_searchMenuLocation = SEARCH_NONE;
    }
    else if (m_searchMenuLocation == SEARCH_TYPE)
    {
      if (m_searchType != SEARCH_TYPE_NONE && m_memoryDump->size() == 0)
        m_searchType = SEARCH_TYPE_NONE;
      else
        m_searchMenuLocation = SEARCH_NONE;
    }
    else if (m_searchMenuLocation == SEARCH_MODE)
    {
      if (m_searchMode != SEARCH_MODE_NONE)
        m_searchMode = SEARCH_MODE_NONE;
      else
        m_searchMenuLocation = SEARCH_NONE;
    }
    else if (m_searchMenuLocation == SEARCH_REGION)
    {
      if (m_searchRegion != SEARCH_REGION_NONE && m_memoryDump->size() == 0)
        m_searchRegion = SEARCH_REGION_NONE;
      else
        m_searchMenuLocation = SEARCH_NONE;
    }
    else if (m_searchMenuLocation == SEARCH_VALUE)
      m_searchMenuLocation = SEARCH_NONE;
  }

  if (m_debugger->getRunningApplicationPID() == 0)
    return;

  if (m_searchMenuLocation == SEARCH_NONE)
  {
    if (kdown & KEY_UP)
    {
      if (m_selectedEntry > 0)
        m_selectedEntry--;

      if (m_menuLocation == CHEATS)
        if (m_selectedEntry == cheatListOffset && cheatListOffset > 0)
          cheatListOffset--;
    }

    if (kdown & KEY_DOWN) //
    {
      if (m_menuLocation == CANDIDATES)
      {
        if (m_selectedEntry < 7 && m_selectedEntry + m_addresslist_offset < ((m_memoryDump->size() / sizeof(u64)) - 1))
          m_selectedEntry++;
      }
      else
      {
        if (m_selectedEntry < (m_cheatCnt - 1))
          m_selectedEntry++;

        if (m_selectedEntry == (cheatListOffset + 7) && cheatListOffset < (m_cheatCnt - 8))
          cheatListOffset++;
      }
    }
    // start mod
    if ((kdown & KEY_LSTICK) && m_menuLocation == CHEATS)
    {
      // m_searchMenuLocation = SEARCH_editRAM;
      // printf("L Stick pressed, start pointer search  *************\n");
      // startpointersearch(m_heapBaseAddr + 80, 10, 0x800, 3);
      // printf("done pointer search ********************************\n");
      // printf("making a dump for pointers");
      // GuiCheats::searchMemoryAddressesPrimary(m_debugger, m_searchValue[0], m_searchValue[1], SEARCH_TYPE_UNSIGNED_64BIT, SEARCH_MODE_RANGE, SEARCH_REGION_HEAP_AND_MAIN, &m_memoryDump, m_memoryInfo);

      // m_menuLocation = CANDIDATES;
      m_searchType = SEARCH_TYPE_UNSIGNED_64BIT;
      m_searchMode = SEARCH_MODE_POINTER;
      m_searchRegion = SEARCH_REGION_HEAP_AND_MAIN;
      m_searchMenuLocation = SEARCH_VALUE;
      m_selectedEntry = 1;
      m_searchValue[0]._u64 = 0x1000000000;
      m_searchValue[1]._u64 = 0x8000000000;
    }

    if ((kdown & KEY_PLUS) && m_menuLocation == CHEATS)
    {
      printf("start checking pointer\n");
      pointercheck();
    }
    // end mod

    if (m_memoryDump->size() > 0)
    {
      if (kdown & KEY_LEFT)
        if (m_cheatCnt > 0)
        {
          m_menuLocation = CHEATS;
          m_selectedEntry = 0;
          cheatListOffset = 0;
        }

      if (kdown & KEY_RIGHT)
      {
        m_menuLocation = CANDIDATES;
        m_selectedEntry = 0;
        cheatListOffset = 0;
      }
    }

    if (m_menuLocation == CANDIDATES)
    { /* Candidates menu */
      if (m_memoryDump->size() > 0)
      {
        if (kdown & KEY_X && m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
        {
          u64 address = 0;
          m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &address, sizeof(u64));

          if (!_isAddressFrozen(address))
          {
            u64 outValue;
            if (m_memoryDump1 == nullptr)
            {
              if (R_SUCCEEDED(dmntchtEnableFrozenAddress(address, dataTypeSizes[m_searchType], &outValue)))
              {
                (new Snackbar("Froze variable!"))->show();
                m_frozenAddresses.insert({address, outValue});
              }
              else
                (new Snackbar("Failed to freeze variable!"))->show();
            }
            else
            {
              bookmark_t bookmark;
              m_AttributeDumpBookmark->getData((m_selectedEntry + m_addresslist_offset) * sizeof(bookmark_t), &bookmark, sizeof(bookmark_t));
              if (R_SUCCEEDED(dmntchtEnableFrozenAddress(address, dataTypeSizes[bookmark.type], &outValue)))
              {
                (new Snackbar("Froze variable!"))->show();
                m_frozenAddresses.insert({address, outValue});
              }
              else
                (new Snackbar("Failed to freeze variable!"))->show();
            }
          }
          else
          {
            if (R_SUCCEEDED(dmntchtDisableFrozenAddress(address)))
            {
              (new Snackbar("Unfroze variable!"))->show();
              m_frozenAddresses.erase(address);
            }
            else
              (new Snackbar("Failed to unfreeze variable!"))->show();
          }
        }
        // add bookmark
        if (kdown & KEY_PLUS && m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
        {
          u64 address = 0;
          m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &address, sizeof(u64));

          bookmark_t bookmark;
          bookmark.type = m_searchType;
          Gui::requestKeyboardInput("Enter Label", "Enter Label to add to bookmark .", "", SwkbdType_QWERTY, bookmark.label, 18);
          m_AttributeDumpBookmark->addData((u8 *)&bookmark, sizeof(bookmark_t));
          m_AttributeDumpBookmark->flushBuffer();

          m_memoryDumpBookmark->addData((u8 *)&address, sizeof(u64));
          m_memoryDumpBookmark->flushBuffer();

          (new Snackbar("Address added to bookmark!"))->show(); // prompt for label
          printf("%s\n", "PLUS key pressed");
        }
        // add bookmark end
        // show memory editor
        // BM1
        if (kdown & KEY_RSTICK && m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
        {
          m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &m_EditorBaseAddr, sizeof(u64));
          m_searchMenuLocation = SEARCH_editRAM;
          m_selectedEntry = (m_EditorBaseAddr % 16) / 4 + 11;
        }
        if ((kdown & KEY_LSTICK) && (m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR))
        {
          printf("start pointer search ....................\n");
          m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &m_EditorBaseAddr, sizeof(u64));
          printf("Address %lx \n\n\n", m_EditorBaseAddr);
          m_Time1 = time(NULL);
          // m_pointeroffsetDump = new MemoryDump(EDIZON_DIR "/pointerdump1.dat", DumpType::POINTER, true);
          m_searchValue[0]._u64 = m_EditorBaseAddr - 0x800;
          m_searchValue[1]._u64 = m_EditorBaseAddr;
          startpointersearch(m_EditorBaseAddr);
          printf("done pointer search \n");
          printf("Time taken =%d\n", time(NULL) - m_Time1);

          // m_EditorBaseAddr = static_cast<u64>(std::stoul(input, nullptr, 16));
          // m_searchMenuLocation = SEARCH_editRAM;
          // m_selectedEntry = (m_EditorBaseAddr % 16) / 4 + 11;
        }
        // end
        if (kdown & KEY_A && m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
        {
          u64 address = 0;
          m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &address, sizeof(u64));

          if (m_selectedEntry < 8)
          {
            char input[16];
            char initialString[21];
            // start mod address content edit Hex option

            //
            strcpy(initialString, _getAddressDisplayString(address, m_debugger, m_searchType).c_str());
            if (Gui::requestKeyboardInput("Enter value", "Enter a value that should get written at this .", initialString, m_searchValueFormat == FORMAT_DEC ? SwkbdType_NumPad : SwkbdType_QWERTY, input, 18))
            {
              if (m_searchValueFormat == FORMAT_HEX)
              {
                auto value = static_cast<u64>(std::stoul(input, nullptr, 16));
                m_debugger->writeMemory(&value, sizeof(value), address);
              }
              else if (m_searchType == SEARCH_TYPE_FLOAT_32BIT)
              {
                auto value = static_cast<float>(std::atof(input));
                m_debugger->writeMemory(&value, sizeof(value), address);
              }
              else if (m_searchType == SEARCH_TYPE_FLOAT_64BIT)
              {
                auto value = std::atof(input);
                m_debugger->writeMemory(&value, sizeof(value), address);
              }
              else if (m_searchType != SEARCH_TYPE_NONE)
              {
                auto value = std::atol(input);
                m_debugger->writeMemory((void *)&value, dataTypeSizes[m_searchType], address);
              }
            }
          }
          else if ((m_memoryDump->size() / sizeof(u64)) < 25)
          {
            std::vector<std::string> options;
            options.clear();

            std::stringstream ss;
            for (u32 i = 7; i < (m_memoryDump->size() / sizeof(u64)); i++)
            { //TODO: i?
              m_memoryDump->getData(m_selectedEntry * sizeof(u64), &address, sizeof(u64));
              ss.str("");
              ss << "0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << address;

              ss << " (" << _getAddressDisplayString(address, m_debugger, m_searchType);

              options.push_back(ss.str());
              printf("%s\n", ss.str().c_str());
            }

            (new ListSelector("Edit value at ", "\uE0E0 Edit value     \uE0E1 Back", options))->setInputAction([&](u32 k, u16 selectedItem) {
                                                                                                if (k & KEY_A)
                                                                                                {
                                                                                                  char input[16];
                                                                                                  char initialString[21];
                                                                                                  u64 selectedAddress;

                                                                                                  m_memoryDump->getData((selectedItem + 7) * sizeof(u64), &selectedAddress, sizeof(u64));

                                                                                                  strcpy(initialString, _getAddressDisplayString(selectedAddress, m_debugger, m_searchType).c_str());

                                                                                                  if (Gui::requestKeyboardInput("Enter value", "Enter a value for which the game's memory should be searched.", initialString, SwkbdType::SwkbdType_NumPad, input, 15))
                                                                                                  {
                                                                                                    u64 value = atol(input);
                                                                                                    if (value > dataTypeMaxValues[m_searchType] || value < dataTypeMinValues[m_searchType])
                                                                                                    {
                                                                                                      (new Snackbar("Entered value isn't inside the range of this data type. Please enter a different value."))->show();
                                                                                                      return;
                                                                                                    }

                                                                                                    m_memoryDump->getData((m_selectedEntry) * sizeof(u64), &selectedAddress, sizeof(u64));
                                                                                                    m_debugger->pokeMemory(dataTypeSizes[m_searchType], selectedAddress, value);
                                                                                                  }
                                                                                                }
                                                                                              })
                ->show();
          }
          else
            (new Snackbar("Too many addresses! Narrow down the selection before editing."))->show();
        }
      }
    }
    else
    { /* Cheats menu */
      if (kdown & KEY_A)
      {
        if (m_cheatCnt == 0)
          return;

        dmntchtToggleCheat(m_cheats[m_selectedEntry].cheat_id);
        u64 cheatCnt = 0;

        dmntchtGetCheatCount(&cheatCnt);
        if (cheatCnt > 0)
        {
          delete[] m_cheats;
          m_cheats = new DmntCheatEntry[cheatCnt];
          dmntchtGetCheats(m_cheats, cheatCnt, 0, &m_cheatCnt);
        }
      }
    }

    if (kdown & KEY_MINUS)
    {
      //make sure not using bookmark m_searchType
      if (m_memoryDump1 != nullptr)
      {
        m_memoryDump = m_memoryDump1;
        m_memoryDump1 = nullptr;
      }
      m_addresslist_offset = 0;
      // end mod
      if (m_memoryDump->size() == 0)
      {
        std::vector<std::string> options;

        if (m_frozenAddresses.size() == 0)
          return;

        std::stringstream ss;
        for (auto [addr, value] : m_frozenAddresses)
        {
          ss << "[ BASE + 0x" << std::uppercase << std::hex << std::setfill('0') << std::setw(10) << (addr - m_addressSpaceBaseAddr) << " ]  ";
          ss << "( " << std::dec << value << " )";
          options.push_back(ss.str());
          ss.str("");
        }

        (new ListSelector("Frozen Addresses", "\uE0E0 Unfreeze     \uE0E1 Back", options))->setInputAction([&](u32 k, u16 selectedItem) {
                                                                                            if (k & KEY_A)
                                                                                            {
                                                                                              auto itr = m_frozenAddresses.begin();
                                                                                              std::advance(itr, selectedItem);

                                                                                              dmntchtDisableFrozenAddress(itr->first);
                                                                                              m_frozenAddresses.erase(itr->first);
                                                                                            }
                                                                                          })
            ->show();
      }
      else
      {
        m_memoryDump->clear();
        remove(EDIZON_DIR "/memdump1.dat");
        remove(EDIZON_DIR "/memdump1a.dat");
        remove(EDIZON_DIR "/memdump2.dat");
        remove(EDIZON_DIR "/memdump3.dat");

        // m_searchType = SEARCH_TYPE_NONE;
        // m_searchMode = SEARCH_MODE_NONE;
        // m_searchRegion = SEARCH_REGION_NONE;
        // m_searchValue[0]._u64 = 0;
        // m_searchValue[1]._u64 = 0;

        m_menuLocation = CHEATS;
      }
    }
    // start mod KEY_PLUS
    // if (kdown & KEY_PLUS) {
    // printf("%s\n","PLUS key pressed");
    // printf("%s\n",titleNameStr.c_str());
    // printf("%s\n",tidStr.c_str());
    // printf("%s\n",buildIDStr.c_str());
    // Gui::g_nextGui = GUI_MAIN;
    // return;
    // }
    if (kdown & KEY_R)
    {
      if (m_searchValueFormat == FORMAT_HEX)
        m_searchValueFormat = FORMAT_DEC;
      else
        m_searchValueFormat = FORMAT_HEX;
      if (m_searchValueFormat == FORMAT_HEX)
        printf("%s\n", "HEX");
      printf("%s\n", "R key pressed");
    }
    if (kdown & KEY_L) //toggle bookmark view bookmark : (m_memoryDump1 != nullptr)
    {
      if (m_memoryDump1 == nullptr)
      {
        m_memoryDump1 = m_memoryDump;
        m_memoryDump = m_memoryDumpBookmark;
        m_addresslist_offset = 0;
        //consider to remove later
        if (m_searchType == SEARCH_TYPE_NONE)
          m_searchType = SEARCH_TYPE_UNSIGNED_32BIT; // to make sure not blank
        // end
        // (new Snackbar("Switch to bookmark List!"))->show();
        printf("%s\n", "Bookmark");
      }
      else
      {
        m_memoryDump = m_memoryDump1;
        m_memoryDump1 = nullptr;
        // (new Snackbar("Switch to Normal List!"))->show();
      }
      printf("%s\n", "L key pressed");
    }
    if (kdown & KEY_ZR)
    {
      m_addresslist_offset += 8;
      if (m_addresslist_offset >= (m_memoryDump->size() / sizeof(u64)))
        m_addresslist_offset -= 8;
      if (m_selectedEntry + m_addresslist_offset + 1 > (m_memoryDump->size() / sizeof(u64)))
        m_selectedEntry = (m_memoryDump->size() / sizeof(u64)) % 8 - 1;
      // printf("%s\n", "ZR key pressed");
    }

    if (kdown & KEY_ZL)
    {
      if (m_addresslist_offset >= 8)
        m_addresslist_offset -= 8;
      // printf("%s\n", "ZL key pressed");
    }

    // End Mod
    if (kdown & KEY_Y)
    {
      if (m_searchMenuLocation == SEARCH_NONE)
      {
        if (m_searchMode == SEARCH_MODE_NONE)
        {
          m_searchMenuLocation = SEARCH_MODE;
          // m_selectedEntry = m_searchType == SEARCH_TYPE_NONE ? 0 : m_searchType;
        }
        else
          m_searchMenuLocation = SEARCH_VALUE;
        // auto toggle between stateA and stateB
        if (m_searchMode == SEARCH_MODE_DIFFA)
        {
          m_searchMode = SEARCH_MODE_SAMEA;
          m_selectedEntry = 1;
        }
        else if (m_searchMode == SEARCH_MODE_SAMEA)
        {
          m_searchMode = SEARCH_MODE_DIFFA;
          m_selectedEntry = 1;
        }
        else
          m_selectedEntry = 0;

        cheatListOffset = 0;
      }
      printf("%s\n", "Y key pressed");
      printf("%s\n", titleNameStr.c_str());
      printf("%s\n", tidStr.c_str());
      printf("%s\n", buildIDStr.c_str());
      //make sure not using bookmark
      if (m_memoryDump1 != nullptr)
      {
        m_memoryDump = m_memoryDump1;
        m_memoryDump1 = nullptr;
      }
      m_addresslist_offset = 0;
      // end mod
    }
  }
  else
  {
    if ((m_searchMenuLocation == SEARCH_TYPE && m_searchType == SEARCH_TYPE_NONE) ||
        (m_searchMenuLocation == SEARCH_MODE && m_searchMode == SEARCH_MODE_NONE) ||
        (m_searchMenuLocation == SEARCH_REGION && m_searchRegion == SEARCH_REGION_NONE) ||
        (m_searchMenuLocation == SEARCH_VALUE) ||
        (m_searchMenuLocation == SEARCH_editRAM))
    {
      if (kdown & KEY_UP)
      {
        switch (m_searchMenuLocation)
        {
        case SEARCH_TYPE:
          [[fallthrough]] case SEARCH_MODE : if (m_selectedEntry % 2 == 1)
                                                 m_selectedEntry--;
          break;
        case SEARCH_REGION:
          if (m_selectedEntry > 0)
            m_selectedEntry--;
          break;
        case SEARCH_VALUE:
          m_selectedEntry = 0;
          break;
        case SEARCH_NONE:
          break;
        case SEARCH_editRAM: // need UP
          if (m_selectedEntry > 4)
            m_selectedEntry -= 5;
          else
          {
            m_EditorBaseAddr -= 0x10;
          }

          break;
        }
      }

      if (kdown & KEY_DOWN)
      {
        switch (m_searchMenuLocation)
        {
        case SEARCH_TYPE:
          [[fallthrough]] case SEARCH_MODE : if ((m_selectedEntry + 1) < 12 && m_selectedEntry % 2 == 0)
                                                 m_selectedEntry++;
          break;
        case SEARCH_REGION:
          if (m_selectedEntry < 3)
            m_selectedEntry++;
          break;
        case SEARCH_VALUE:
          if (m_searchType != SEARCH_TYPE_NONE && m_searchMode != SEARCH_MODE_NONE && m_searchRegion != SEARCH_REGION_NONE)
            m_selectedEntry = 1;
          break;
        case SEARCH_NONE:
          break;
        case SEARCH_editRAM: // need DOWN
          if (m_selectedEntry < 35)
            m_selectedEntry += 5;
          else
          {
            m_EditorBaseAddr += 0x10;
          }

          break;
        }
      }

      if (kdown & KEY_LEFT)
      {
        switch (m_searchMenuLocation)
        {
        case SEARCH_TYPE:
          [[fallthrough]] case SEARCH_MODE : if (m_selectedEntry >= 2)
                                                 m_selectedEntry -= 2;
          break;
        case SEARCH_REGION:
          break;
        case SEARCH_VALUE:
          if (m_searchValueIndex == 1)
            m_searchValueIndex--;
          break;
        case SEARCH_NONE:
          break;
        case SEARCH_editRAM: // need LEFT
          if (m_selectedEntry % 5 > 1)
            m_selectedEntry--;
          break;
        }
      }

      if (kdown & KEY_RIGHT)
      {
        switch (m_searchMenuLocation)
        {
        case SEARCH_TYPE:
          [[fallthrough]] case SEARCH_MODE : if (m_selectedEntry <= 9)
                                                 m_selectedEntry += 2;
          break;
        case SEARCH_REGION:
          break;
        case SEARCH_VALUE:
          if (m_searchValueIndex == 0 && m_searchMode == SEARCH_MODE_RANGE)
            m_searchValueIndex++;
          break;
        case SEARCH_NONE:
          break;
        case SEARCH_editRAM: // need RIGHT
          if (m_selectedEntry % 5 < 4)
            m_selectedEntry++;
          break;
        }
      }

      if (m_searchMenuLocation == SEARCH_editRAM)
      {
        if (kdown & KEY_PLUS)
        {
          u64 address = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20 + (m_selectedEntry - 1 - (m_selectedEntry / 5)) * 4 + m_addressmod;

          bookmark_t bookmark;
          bookmark.type = m_searchType;
          Gui::requestKeyboardInput("Enter Label", "Enter Label to add to bookmark .", "", SwkbdType_QWERTY, bookmark.label, 18);
          m_AttributeDumpBookmark->addData((u8 *)&bookmark, sizeof(bookmark_t));
          m_AttributeDumpBookmark->flushBuffer();

          (new Snackbar("Address added to bookmark!"))->show();
          m_memoryDumpBookmark->addData((u8 *)&address, sizeof(u64));
          m_memoryDumpBookmark->flushBuffer();
          printf("%s\n", "PLUS key pressed");
        }
        if (kdown & KEY_ZR)
        {
          m_EditorBaseAddr += 0x80;
        }
        if (kdown & KEY_ZL)
        {
          m_EditorBaseAddr -= 0x80;
        }
        if (kdown & KEY_R)
        {
          m_addressmod++;
          m_addressmod = m_addressmod % 4;
        }
        if (kdown & KEY_L)
        {
          m_addressmod--;
          m_addressmod = m_addressmod % 4;
        }
        if (kdown & KEY_X)
        {
          if (m_searchValueFormat == FORMAT_DEC)
            m_searchValueFormat = FORMAT_HEX;
          else
            m_searchValueFormat = FORMAT_DEC;
        }
        if (kdown & KEY_Y) // BM9
        {
          u64 address = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20 + (m_selectedEntry - 1 - (m_selectedEntry / 5)) * 4 + m_addressmod;
          std::stringstream ss;
          ss << "0x" << std::uppercase << std::hex << address;
          char input[16];
          if (Gui::requestKeyboardInput("Enter Address", "Enter Address to add to bookmark .", ss.str(), SwkbdType_QWERTY, input, 18))
          {
            address = static_cast<u64>(std::stoul(input, nullptr, 16));

            bookmark_t bookmark;
            bookmark.type = m_searchType;
            Gui::requestKeyboardInput("Enter Label", "Enter Label to add to bookmark .", "", SwkbdType_QWERTY, bookmark.label, 18);
            m_AttributeDumpBookmark->addData((u8 *)&bookmark, sizeof(bookmark_t));
            m_AttributeDumpBookmark->flushBuffer();

            (new Snackbar("Address added to bookmark!"))->show();
            m_memoryDumpBookmark->addData((u8 *)&address, sizeof(u64));
            m_memoryDumpBookmark->flushBuffer();
          }
        }
      }

      // inc and dec search value
      if ((kdown & KEY_ZR) && (m_searchMenuLocation == SEARCH_VALUE) && (m_searchType == SEARCH_TYPE_UNSIGNED_32BIT))
      {
        m_searchValue[0]._u32++;
        m_selectedEntry = 1;
      };
      if ((kdown & KEY_ZL) && (m_searchMenuLocation == SEARCH_VALUE) && (m_searchType == SEARCH_TYPE_UNSIGNED_32BIT))
      {
        m_searchValue[0]._u32--;
        m_selectedEntry = 1;
      };

      if (kdown & KEY_A)
      {
        if (m_searchMenuLocation == SEARCH_editRAM)
        { // BM3
          // EditRAM routine
          // to update to use L and R to select type and display it on the top line
          u64 address = m_EditorBaseAddr - (m_EditorBaseAddr % 16) - 0x20 + (m_selectedEntry - 1 - (m_selectedEntry / 5)) * 4 + m_addressmod;
          char input[16];
          char initialString[21];
          strcpy(initialString, _getAddressDisplayString(address, m_debugger, m_searchType).c_str());
          if (Gui::requestKeyboardInput("Enter value", "Enter a value that should get written at this .", initialString, m_searchValueFormat == FORMAT_DEC ? SwkbdType_NumPad : SwkbdType_QWERTY, input, 18))
          {
            if (m_searchValueFormat == FORMAT_HEX)
            {
              auto value = static_cast<u64>(std::stoul(input, nullptr, 16));
              m_debugger->writeMemory(&value, sizeof(value), address);
            }
            else if (m_searchType == SEARCH_TYPE_FLOAT_32BIT)
            {
              auto value = static_cast<float>(std::atof(input));
              m_debugger->writeMemory(&value, sizeof(value), address);
            }
            else if (m_searchType == SEARCH_TYPE_FLOAT_64BIT)
            {
              auto value = std::atof(input);
              m_debugger->writeMemory(&value, sizeof(value), address);
            }
            else if (m_searchType != SEARCH_TYPE_NONE)
            {
              auto value = std::atol(input);
              m_debugger->writeMemory((void *)&value, dataTypeSizes[m_searchType], address);
            }
          }
        }
        else if (m_searchMenuLocation == SEARCH_TYPE)
          m_searchType = static_cast<searchType_t>(m_selectedEntry);
        else if (m_searchMenuLocation == SEARCH_REGION)
          m_searchRegion = static_cast<searchRegion_t>(m_selectedEntry);
        else if (m_searchMenuLocation == SEARCH_MODE)
          m_searchMode = static_cast<searchMode_t>(m_selectedEntry);
        else if (m_searchMenuLocation == SEARCH_VALUE)
        {
          if (m_selectedEntry == 0)
          {
            m_selectedEntry = 1;
            char str[0x21];
            // Start Mod keep previous value
            // End Mod
            if ((m_searchValue[m_searchValueIndex]._u32 > 10) || (m_searchValueFormat == FORMAT_HEX))
            {
              Gui::requestKeyboardInput("Enter the value you want to search for", "Based on your previously chosen options, EdiZon will expect different input here.", _getValueDisplayString(m_searchValue[m_searchValueIndex], m_searchType), m_searchValueFormat == FORMAT_DEC ? SwkbdType_NumPad : SwkbdType_QWERTY, str, 0x20);
            }
            else
            {
              Gui::requestKeyboardInput("Enter the value you want to search for", "Based on your previously chosen options, EdiZon will expect different input here.", "", m_searchValueFormat == FORMAT_DEC ? SwkbdType_NumPad : SwkbdType_QWERTY, str, 0x20);
            }
            if (std::string(str) == "")
              return;

            if (m_searchValueFormat == FORMAT_HEX)
            {
              m_searchValue[m_searchValueIndex]._u64 = static_cast<u64>(std::stoul(str, nullptr, 16));
            }
            else
            {
              switch (m_searchType)
              {
              case SEARCH_TYPE_UNSIGNED_8BIT:
                m_searchValue[m_searchValueIndex]._u8 = static_cast<u8>(std::stoul(str, nullptr, 0));
                break;
              case SEARCH_TYPE_UNSIGNED_16BIT:
                m_searchValue[m_searchValueIndex]._u16 = static_cast<u16>(std::stoul(str, nullptr, 0));
                break;
              case SEARCH_TYPE_UNSIGNED_32BIT:
                m_searchValue[m_searchValueIndex]._u32 = static_cast<u32>(std::stoul(str, nullptr, 0));
                break;
              case SEARCH_TYPE_UNSIGNED_64BIT:
                m_searchValue[m_searchValueIndex]._u64 = static_cast<u64>(std::stoul(str, nullptr, 0));
                break;
              case SEARCH_TYPE_SIGNED_8BIT:
                m_searchValue[m_searchValueIndex]._s8 = static_cast<s8>(std::stol(str, nullptr, 0));
                break;
              case SEARCH_TYPE_SIGNED_16BIT:
                m_searchValue[m_searchValueIndex]._s16 = static_cast<s16>(std::stol(str, nullptr, 0));
                break;
              case SEARCH_TYPE_SIGNED_32BIT:
                m_searchValue[m_searchValueIndex]._s32 = static_cast<s32>(std::stol(str, nullptr, 0));
                break;
              case SEARCH_TYPE_SIGNED_64BIT:
                m_searchValue[m_searchValueIndex]._s64 = static_cast<s64>(std::stol(str, nullptr, 0));
                break;
              case SEARCH_TYPE_FLOAT_32BIT:
                m_searchValue[m_searchValueIndex]._f32 = static_cast<float>(std::stof(str));
                break;
              case SEARCH_TYPE_FLOAT_64BIT:
                m_searchValue[m_searchValueIndex]._f64 = static_cast<double>(std::stod(str));
                break;
              case SEARCH_TYPE_POINTER:
                m_searchValue[m_searchValueIndex]._u64 = static_cast<u64>(std::stol(str));
                break;
              case SEARCH_TYPE_NONE:
                break;
              }
            }
          }
          else if (m_selectedEntry == 1)
          {
            (new MessageBox("Traversing title memory.\n \nThis may take a while...", MessageBox::NONE))->show();
            requestDraw();

            overclockSystem(true);

            if (m_searchMode == SEARCH_MODE_POINTER)
              m_searchType = SEARCH_TYPE_UNSIGNED_64BIT;

            if (m_searchMode == SEARCH_MODE_SAME || m_searchMode == SEARCH_MODE_DIFF || m_searchMode == SEARCH_MODE_INC || m_searchMode == SEARCH_MODE_DEC || m_searchMode == SEARCH_MODE_DIFFA || m_searchMode == SEARCH_MODE_SAMEA)
            {
              if (m_memoryDump->size() == 0)
              {
                delete m_memoryDump;
                GuiCheats::searchMemoryValuesPrimary(m_debugger, m_searchType, m_searchMode, m_searchRegion, &m_memoryDump, m_memoryInfo);
                printf("%s%lx\n", "Dump Size = ", m_memoryDump->size());
              }
              else if (m_memoryDump->getDumpInfo().dumpType == DumpType::DATA)
              {
                printf("%s%lx\n", "Dump Size = ", m_memoryDump->size());
                GuiCheats::searchMemoryValuesSecondary(m_debugger, m_searchType, m_searchMode, m_searchRegion, &m_memoryDump, m_memoryInfo);
                delete m_memoryDump;
                remove(EDIZON_DIR "/memdump1.dat");
                rename(EDIZON_DIR "/memdump3.dat", EDIZON_DIR "/memdump1.dat");
                printf("%s\n", "renaming");
                m_memoryDump = new MemoryDump(EDIZON_DIR "/memdump1.dat", DumpType::ADDR, false);
              }
              else if (m_memoryDump->getDumpInfo().dumpType == DumpType::ADDR)
              {
                GuiCheats::searchMemoryValuesTertiary(m_debugger, m_searchValue[0], m_searchValue[1], m_searchType, m_searchMode, m_searchRegion, &m_memoryDump, m_memoryInfo);
                delete m_memoryDump;
                remove(EDIZON_DIR "/memdump1.dat");
                remove(EDIZON_DIR "/memdump1a.dat");
                rename(EDIZON_DIR "/memdump3.dat", EDIZON_DIR "/memdump1.dat");
                rename(EDIZON_DIR "/memdump3a.dat", EDIZON_DIR "/memdump1a.dat");
                m_memoryDump = new MemoryDump(EDIZON_DIR "/memdump1.dat", DumpType::ADDR, false);
                remove(EDIZON_DIR "/datadump2.dat");
                rename(EDIZON_DIR "/datadump4.dat", EDIZON_DIR "/datadump2.dat");
                // rename B to A
                remove(EDIZON_DIR "/datadumpA.dat");
                rename(EDIZON_DIR "/datadumpAa.dat", EDIZON_DIR "/datadumpA.dat");
                remove(EDIZON_DIR "/datadumpB.dat");
                rename(EDIZON_DIR "/datadumpBa.dat", EDIZON_DIR "/datadumpB.dat");
              }
            }
            else
            {
              if (m_memoryDump->size() == 0)
              {
                delete m_memoryDump;
                GuiCheats::searchMemoryAddressesPrimary(m_debugger, m_searchValue[0], m_searchValue[1], m_searchType, m_searchMode, m_searchRegion, &m_memoryDump, m_memoryInfo);
              }
              else
              {
                m_nothingchanged = false;
                GuiCheats::searchMemoryAddressesSecondary(m_debugger, m_searchValue[0], m_searchValue[1], m_searchType, m_searchMode, &m_memoryDump);
                if (m_nothingchanged == false)
                {
                  remove(EDIZON_DIR "/memdump1a.dat");                              // remove old helper
                  rename(EDIZON_DIR "/memdump3a.dat", EDIZON_DIR "/memdump1a.dat"); // rename new helper to current helper
                }
              }
            }

            overclockSystem(false);

            Gui::g_currMessageBox->hide();

            m_searchMenuLocation = SEARCH_NONE;
            // m_searchMode = SEARCH_MODE_NONE;
          }
        }
      }
    }

    if (kdown & KEY_X)
    {
      if (m_searchMenuLocation == SEARCH_VALUE)
      {
        if (m_searchValueFormat == FORMAT_DEC)
          m_searchValueFormat = FORMAT_HEX;
        else
          m_searchValueFormat = FORMAT_DEC;
      }
    }

    if (kdown & KEY_L)
    {
      if (m_searchMenuLocation == SEARCH_VALUE)
      {
        m_searchMenuLocation = SEARCH_REGION;
        m_selectedEntry = m_searchRegion == SEARCH_REGION_NONE ? 0 : static_cast<u32>(m_searchRegion);
      }
      else if (m_searchMenuLocation == SEARCH_REGION)
      {
        m_searchMenuLocation = SEARCH_MODE;
        m_selectedEntry = m_searchMode == SEARCH_MODE_NONE ? 0 : static_cast<u32>(m_searchMode);
      }
      else if (m_searchMenuLocation == SEARCH_MODE)
      {
        m_searchMenuLocation = SEARCH_TYPE;
        m_selectedEntry = m_searchType == SEARCH_TYPE_NONE ? 0 : static_cast<u32>(m_searchType);
      }
    }

    if (kdown & KEY_R)
    {
      if (m_searchMenuLocation == SEARCH_TYPE)
      {
        m_searchMenuLocation = SEARCH_MODE;
        m_selectedEntry = m_searchMode == SEARCH_MODE_NONE ? 0 : static_cast<u32>(m_searchMode);
      }
      else if (m_searchMenuLocation == SEARCH_MODE)
      {
        m_searchMenuLocation = SEARCH_REGION;
        m_selectedEntry = m_searchRegion == SEARCH_REGION_NONE ? 0 : static_cast<u32>(m_searchRegion);
      }
      else if (m_searchMenuLocation == SEARCH_REGION)
      {
        m_searchMenuLocation = SEARCH_VALUE;
        m_selectedEntry = 0;
        m_searchValueIndex = 0;
      }
    }
  }
}

void GuiCheats::onTouch(touchPosition &touch)
{
}

void GuiCheats::onGesture(touchPosition startPosition, touchPosition endPosition, bool finish)
{
}
static bool _isAddressFrozen(uintptr_t address)
{
  DmntFrozenAddressEntry *es;
  u64 Cnt = 0;
  bool frozen = false;

  dmntchtGetFrozenAddressCount(&Cnt);

  if (Cnt != 0)
  {
    es = new DmntFrozenAddressEntry[Cnt];
    dmntchtGetFrozenAddresses(es, Cnt, 0, nullptr);

    for (u64 i = 0; i < Cnt; i++)
    {
      if (es[i].address == address)
      {
        frozen = true;
        break;
      }
    }
  }

  return frozen;
}

static std::string _getAddressDisplayString(u64 address, Debugger *debugger, searchType_t searchType)
{
  std::stringstream ss;

  searchValue_t searchValue;
  searchValue._u64 = debugger->peekMemory(address);
  // start mod for address content display
  if (m_searchValueFormat == FORMAT_HEX)
    ss << "0x" << std::uppercase << std::hex << searchValue._u64;
  else
  {

    // end mod
    switch (searchType)
    {
    case SEARCH_TYPE_UNSIGNED_8BIT:
      ss << std::dec << static_cast<u64>(searchValue._u8);
      break;
    case SEARCH_TYPE_UNSIGNED_16BIT:
      ss << std::dec << static_cast<u64>(searchValue._u16);
      break;
    case SEARCH_TYPE_UNSIGNED_32BIT:
      ss << std::dec << static_cast<u64>(searchValue._u32);
      break;
    case SEARCH_TYPE_UNSIGNED_64BIT:
      ss << std::dec << static_cast<u64>(searchValue._u64);
      break;
    case SEARCH_TYPE_SIGNED_8BIT:
      ss << std::dec << static_cast<s64>(searchValue._s8);
      break;
    case SEARCH_TYPE_SIGNED_16BIT:
      ss << std::dec << static_cast<s64>(searchValue._s16);
      break;
    case SEARCH_TYPE_SIGNED_32BIT:
      ss << std::dec << static_cast<s64>(searchValue._s32);
      break;
    case SEARCH_TYPE_SIGNED_64BIT:
      ss << std::dec << static_cast<s64>(searchValue._s64);
      break;
    case SEARCH_TYPE_FLOAT_32BIT:
      ss << std::dec << searchValue._f32;
      break;
    case SEARCH_TYPE_FLOAT_64BIT:
      ss << std::dec << searchValue._f64;
      break;
    case SEARCH_TYPE_POINTER:
      ss << std::dec << searchValue._u64;
      break;
    case SEARCH_TYPE_NONE:
      break;
    }
  }

  return ss.str();
}

static std::string _getValueDisplayString(searchValue_t searchValue, searchType_t searchType)
{
  std::stringstream ss;

  if (m_searchValueFormat == FORMAT_HEX)
  {
    ss << "0x" << std::uppercase << std::hex << searchValue._u64;
  }
  else
  {
    switch (searchType)
    {
    case SEARCH_TYPE_UNSIGNED_8BIT:
      ss << std::dec << static_cast<u64>(searchValue._u8);
      break;
    case SEARCH_TYPE_UNSIGNED_16BIT:
      ss << std::dec << static_cast<u64>(searchValue._u16);
      break;
    case SEARCH_TYPE_UNSIGNED_32BIT:
      ss << std::dec << static_cast<u64>(searchValue._u32);
      break;
    case SEARCH_TYPE_UNSIGNED_64BIT:
      ss << std::dec << static_cast<u64>(searchValue._u64);
      break;
    case SEARCH_TYPE_SIGNED_8BIT:
      ss << std::dec << static_cast<s64>(searchValue._s8);
      break;
    case SEARCH_TYPE_SIGNED_16BIT:
      ss << std::dec << static_cast<s64>(searchValue._s16);
      break;
    case SEARCH_TYPE_SIGNED_32BIT:
      ss << std::dec << static_cast<s64>(searchValue._s32);
      break;
    case SEARCH_TYPE_SIGNED_64BIT:
      ss << std::dec << static_cast<s64>(searchValue._s64);
      break;
    case SEARCH_TYPE_FLOAT_32BIT:
      ss.precision(15);
      ss << std::dec << searchValue._f32;
      break;
    case SEARCH_TYPE_FLOAT_64BIT:
      ss.precision(15);
      ss << std::dec << searchValue._f64;
      break;
    case SEARCH_TYPE_POINTER:
      ss << std::dec << searchValue._u64;
      break;
    case SEARCH_TYPE_NONE:
      break;
    }
  }

  return ss.str();
}
// read
void GuiCheats::searchMemoryAddressesPrimary(Debugger *debugger, searchValue_t searchValue1, searchValue_t searchValue2, searchType_t searchType, searchMode_t searchMode, searchRegion_t searchRegion, MemoryDump **displayDump, std::vector<MemoryInfo> memInfos)
{
  (*displayDump) = new MemoryDump(EDIZON_DIR "/memdump1.dat", DumpType::ADDR, true);
  (*displayDump)->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
  (*displayDump)->setSearchParams(searchType, searchMode, searchRegion, searchValue1, searchValue2);

  MemoryDump *helperDump = new MemoryDump(EDIZON_DIR "/memdump1a.dat", DumpType::HELPER, true); // has address, size, count for fetching buffer from memory
  MemoryDump *newdataDump = new MemoryDump(EDIZON_DIR "/datadump2.dat", DumpType::DATA, true);
  MemoryDump *newstringDump = new MemoryDump(EDIZON_DIR "/stringdump.dat", DumpType::DATA, true); // to del when not needed

  helperinfo_t helperinfo;
  helperinfo.count = 0;

  bool ledOn = false;

  time_t unixTime1 = time(NULL);
  printf("%s%lx\n", "Start Time primary search", unixTime1);
  // printf("main %lx main end %lx heap %lx heap end %lx \n",m_mainBaseAddr, m_mainBaseAddr+m_mainSize, m_heapBaseAddr, m_heapBaseAddr+m_heapSize);
  for (MemoryInfo meminfo : memInfos)
  {

    // printf("%s%p", "meminfo.addr, ", meminfo.addr);
    // printf("%s%p", ", meminfo.end, ", meminfo.addr + meminfo.size);
    // printf("%s%p", ", meminfo.size, ", meminfo.size);
    // printf("%s%lx", ", meminfo.type, ", meminfo.type);
    // printf("%s%lx", ", meminfo.attr, ", meminfo.attr);
    // printf("%s%lx", ", meminfo.perm, ", meminfo.perm);
    // printf("%s%lx", ", meminfo.device_refcount, ", meminfo.device_refcount);
    // printf("%s%lx\n", ", meminfo.ipc_refcount, ", meminfo.ipc_refcount);

    if (searchRegion == SEARCH_REGION_HEAP && meminfo.type != MemType_Heap)
      continue;
    else if (searchRegion == SEARCH_REGION_MAIN &&
             (meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_HEAP_AND_MAIN &&
             (meminfo.type != MemType_Heap && meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_RAM && (meminfo.perm & Perm_Rw) != Perm_Rw)
      continue;

    setLedState(ledOn);
    ledOn = !ledOn;

    u64 offset = 0;
    u64 bufferSize = MAX_BUFFER_SIZE; // consider to increase from 10k to 1M (not a big problem)
    u8 *buffer = new u8[bufferSize];
    while (offset < meminfo.size)
    {

      if (meminfo.size - offset < bufferSize)
        bufferSize = meminfo.size - offset;

      debugger->readMemory(buffer, bufferSize, meminfo.addr + offset);

      searchValue_t realValue = {0};
      for (u32 i = 0; i < bufferSize; i += dataTypeSizes[searchType])
      {
        u64 address = meminfo.addr + offset + i;
        memset(&realValue, 0, 8);
        memcpy(&realValue, buffer + i, dataTypeSizes[searchType]);

        switch (searchMode)
        {
        case SEARCH_MODE_EQ:
          if (realValue._s64 == searchValue1._s64)
          {
            (*displayDump)->addData((u8 *)&address, sizeof(u64));
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_NEQ:
          if (realValue._s64 != searchValue1._s64)
          {
            (*displayDump)->addData((u8 *)&address, sizeof(u64));
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_GT:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (realValue._s64 > searchValue1._s64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (realValue._u64 > searchValue1._u64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        case SEARCH_MODE_DIFFA:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (realValue._s64 >= searchValue1._s64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (realValue._u64 >= searchValue1._u64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        case SEARCH_MODE_LT:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (realValue._s64 < searchValue1._s64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (realValue._u64 < searchValue1._u64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        case SEARCH_MODE_SAMEA:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (realValue._s64 <= searchValue1._s64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (realValue._u64 <= searchValue1._u64)
            {
              (*displayDump)->addData((u8 *)&address, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        case SEARCH_MODE_RANGE:
          if (realValue._s64 >= searchValue1._s64 && realValue._s64 <= searchValue2._s64)
          {
            (*displayDump)->addData((u8 *)&address, sizeof(u64));
            newdataDump->addData((u8 *)&realValue, sizeof(u64));
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_POINTER: //m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize
          if (((realValue._u64 >= m_mainBaseAddr) && (realValue._u64 <= (m_mainBaseAddr + m_mainSize))) || ((realValue._u64 >= m_heapBaseAddr) && (realValue._u64 <= (m_heapBaseAddr + m_heapSize))))
          {
            if ((m_forwarddump) && (address > realValue._u64) && (meminfo.type == MemType_Heap))
              break;
            (*displayDump)->addData((u8 *)&address, sizeof(u64));
            newdataDump->addData((u8 *)&realValue, sizeof(u64));
            helperinfo.count++;
            // printf("%lx,%lx\n",address,realValue);
            char st[25];                                         // replace the printf
            snprintf(st, 25, "'%lx,'%lx\n", address, realValue); //
            newstringDump->addData((u8 *)&st, sizeof(st));       //
          }
          break;
        }
      }

      // helper info write must be before inc
      if (helperinfo.count != 0)
      {
        helperinfo.address = meminfo.addr + offset;
        helperinfo.size = bufferSize;
        helperDump->addData((u8 *)&helperinfo, sizeof(helperinfo));
        // printf("address 0x%lx ", helperinfo.address);
        // printf("size %ld ", helperinfo.size);
        // printf("count %ld type %d \n ", helperinfo.count, meminfo.type);
        helperinfo.count = 0;
      } // must be after write

      offset += bufferSize;
    }

    delete[] buffer;
  }

  setLedState(false);

  time_t unixTime2 = time(NULL);
  printf("%s%lx\n", "Stop Time ", unixTime2);
  printf("%s%ld\n", "Stop Time ", unixTime2 - unixTime1);

  (*displayDump)->flushBuffer();
  newdataDump->flushBuffer();
  helperDump->flushBuffer();
  delete helperDump;
  delete newdataDump;
  newstringDump->flushBuffer(); // temp
  delete newstringDump;         //
}
//

void GuiCheats::searchMemoryAddressesSecondary(Debugger *debugger, searchValue_t searchValue1, searchValue_t searchValue2, searchType_t searchType, searchMode_t searchMode, MemoryDump **displayDump)
{
  MemoryDump *newDump = new MemoryDump(EDIZON_DIR "/memdump2.dat", DumpType::ADDR, true);
  bool ledOn = false;
  //begin
  time_t unixTime1 = time(NULL);
  printf("%s%lx\n", "Start Time Secondary search", unixTime1);

  u64 offset = 0;
  u64 bufferSize = MAX_BUFFER_SIZE; // this is for file access going for 1M
  u8 *buffer = new u8[bufferSize];
  // helper init
  MemoryDump *helperDump = new MemoryDump(EDIZON_DIR "/memdump1a.dat", DumpType::HELPER, false);   // has address, size, count for fetching buffer from memory
  MemoryDump *newhelperDump = new MemoryDump(EDIZON_DIR "/memdump3a.dat", DumpType::HELPER, true); // has address, size, count for fetching buffer from memory
  MemoryDump *newdataDump = new MemoryDump(EDIZON_DIR "/datadump2.dat", DumpType::DATA, true);
  MemoryDump *debugdump1 = new MemoryDump(EDIZON_DIR "/debugdump1.dat", DumpType::HELPER, true);
  if (helperDump->size() == 0)
  {
    (new Snackbar("Helper file not found !"))->show();
    return;
  }
  else
  {
    // helper integrity check
    printf("start helper integrity check address secondary \n");
    u32 helpercount = 0;
    helperinfo_t helperinfo;
    for (u64 i = 0; i < helperDump->size(); i += sizeof(helperinfo))
    {
      helperDump->getData(i, &helperinfo, sizeof(helperinfo));
      helpercount += helperinfo.count;
    }
    if (helpercount != (*displayDump)->size() / sizeof(u64))
    {
      printf("Integrity problem with helper file helpercount = %d  memdumpsize = %d \n", helpercount, (*displayDump)->size() / sizeof(u64));
      (new Snackbar("Helper integrity check failed !"))->show();
      return;
    }
    printf("end helper integrity check address secondary \n");
    // end helper integrity check

    std::stringstream Message;
    Message << "Traversing title memory.\n \nThis may take a while... secondary search\nTime " << (unixTime1 - time(NULL)) << "    total " << (*displayDump)->size();
    (new MessageBox(Message.str(), MessageBox::NONE))->show();
    requestDraw();
  }

  u8 *ram_buffer = new u8[bufferSize];
  u64 helper_offset = 0;
  helperinfo_t helperinfo;
  helperinfo_t newhelperinfo;
  newhelperinfo.count = 0;

  helperDump->getData(helper_offset, &helperinfo, sizeof(helperinfo)); // helper_offset+=sizeof(helperinfo)
  debugger->readMemory(ram_buffer, helperinfo.size, helperinfo.address);
  // helper init end
  while (offset < (*displayDump)->size())
  {
    if ((*displayDump)->size() - offset < bufferSize)
      bufferSize = (*displayDump)->size() - offset;
    (*displayDump)->getData(offset, buffer, bufferSize); // BM4

    for (u64 i = 0; i < bufferSize; i += sizeof(u64)) // for (size_t i = 0; i < (bufferSize / sizeof(u64)); i++)
    {
      if (helperinfo.count == 0)
      {
        if (newhelperinfo.count != 0)
        {
          newhelperinfo.address = helperinfo.address;
          newhelperinfo.size = helperinfo.size;
          newhelperDump->addData((u8 *)&newhelperinfo, sizeof(newhelperinfo));
          // printf("%s%lx\n", "newhelperinfo.address ", newhelperinfo.address);
          // printf("%s%lx\n", "newhelperinfo.size ", newhelperinfo.size);
          // printf("%s%lx\n", "newhelperinfo.count ", newhelperinfo.count);
          newhelperinfo.count = 0;
        }
        helper_offset += sizeof(helperinfo);
        helperDump->getData(helper_offset, &helperinfo, sizeof(helperinfo));
        debugger->readMemory(ram_buffer, helperinfo.size, helperinfo.address);
      }
      searchValue_t value = {0};
      searchValue_t testing = {0}; // temp
      u64 address = 0;

      address = *reinterpret_cast<u64 *>(&buffer[i]); //(*displayDump)->getData(i * sizeof(u64), &address, sizeof(u64));

      memcpy(&value, ram_buffer + address - helperinfo.address, dataTypeSizes[searchType]); // extrat from buffer instead of making call
      helperinfo.count--;                                                                   // each fetch dec
      // testing = value;                                                                      // temp
      // debugger->readMemory(&value, dataTypeSizes[searchType], address);
      // if (testing._u64 != value._u64)
      // {
      //   printf("%s%lx\n", "helperinfo.address ", helperinfo.address);
      //   printf("%s%lx\n", "helperinfo.size ", helperinfo.size);
      //   printf("%s%lx\n", "helperinfo.count ", helperinfo.count);
      //   printf("%s%lx\n", "address ", address);
      //   printf("%s%lx\n", "testing._u64 ", testing._u64);
      //   printf("%s%lx\n", "value ", value);
      //   printf("%s%lx\n", " address - helperinfo.address ", address - helperinfo.address);
      //   printf("%s%lx\n", " * (ram_buffer + address - helperinfo.address) ", *(ram_buffer + address - helperinfo.address));
      //   printf("%s%lx\n", " * (&ram_buffer[ address - helperinfo.address]) ", *(&ram_buffer[address - helperinfo.address]));
      //   printf("%s%lx\n", "  (ram_buffer + address - helperinfo.address) ", (ram_buffer + address - helperinfo.address));
      //   printf("%s%lx\n", "  (&ram_buffer[ address - helperinfo.address]) ", (&ram_buffer[address - helperinfo.address]));
      //   printf("%s%lx\n", "  helperinfo.size - address + helperinfo.address ", helperinfo.size - address + helperinfo.address);
      //   // debugdump1->addData((u8 *)&ram_buffer, helperinfo.size);
      //   // debugger->readMemory(ram_buffer, 0x50, address);
      //   // debugdump2->addData((u8 *)&ram_buffer, 0x50);
      //   //
      //   // delete debugdump2;
      // }

      if (i % 50000 == 0)
      {
        setLedState(ledOn);
        ledOn = !ledOn;
      }

      switch (searchMode)
      {
      case SEARCH_MODE_EQ:
        if (value._s64 == searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_NEQ:
        if (value._s64 != searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_GT:
        if (value._s64 > searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DIFFA:
        if (value._s64 >= searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_LT:
        if (value._s64 < searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_SAMEA:
        if (value._s64 <= searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_RANGE:
        if (value._s64 >= searchValue1._s64 && value._s64 <= searchValue2._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64)); // add here
          newdataDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_POINTER: //m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize
        if ((value._s64 >= m_mainBaseAddr && value._s64 <= (m_mainBaseAddr + m_mainSize)) || (value._s64 >= m_heapBaseAddr && value._s64 <= (m_heapBaseAddr + m_heapSize)))
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newdataDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_SAME:
        if (value._s64 == searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DIFF:
        if (value._s64 != searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_INC:
        if (value._s64 > searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DEC:
        if (value._s64 < searchValue1._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_NONE:
        break;
      }
    }
    printf("%d of %d done \n", offset, (*displayDump)->size()); // maybe consider message box this info
    offset += bufferSize;
  }

  if (newhelperinfo.count != 0) // take care of the last one
  {
    newhelperinfo.address = helperinfo.address;
    newhelperinfo.size = helperinfo.size;
    newhelperDump->addData((u8 *)&newhelperinfo, sizeof(newhelperinfo));
    // printf("%s%lx\n", "newhelperinfo.address ", newhelperinfo.address);
    // printf("%s%lx\n", "newhelperinfo.size ", newhelperinfo.size);
    // printf("%s%lx\n", "newhelperinfo.count ", newhelperinfo.count);
    newhelperinfo.count = 0;
  }
  //end
  newDump->flushBuffer();
  newhelperDump->flushBuffer();
  newdataDump->flushBuffer();

  if (newDump->size() > 0)
  {
    // delete m_memoryDump;
    // remove(EDIZON_DIR "/memdump1.dat");
    // rename(EDIZON_DIR "/memdump2.dat", EDIZON_DIR "/memdump2.dat");
    (*displayDump)->clear();
    (*displayDump)->setSearchParams(searchType, searchMode, (*displayDump)->getDumpInfo().searchRegion, searchValue1, searchValue2);
    (*displayDump)->setDumpType(DumpType::ADDR);

    // begin copy
    offset = 0;
    bufferSize = MAX_BUFFER_SIZE;                 //0x1000000; // match what was created before
    printf("%s%lx\n", "bufferSize ", bufferSize); // printf
    while (offset < newDump->size())
    {
      if (newDump->size() - offset < bufferSize)
        bufferSize = newDump->size() - offset;
      newDump->getData(offset, buffer, bufferSize);
      (*displayDump)->addData(buffer, bufferSize);
      offset += bufferSize;
    }
    // end copy

    (*displayDump)->flushBuffer();
  }
  else
  {
    (new Snackbar("None of values changed to the entered one!"))->show();
    m_nothingchanged = true;
  }

  setLedState(false);
  delete newDump;
  delete newhelperDump;
  delete helperDump;
  delete debugdump1;
  delete newdataDump;
  delete[] buffer;
  delete[] ram_buffer;

  remove(EDIZON_DIR "/memdump2.dat");
  time_t unixTime2 = time(NULL);
  printf("%s%lx\n", "Stop Time secondary search ", unixTime2);
  printf("%s%ld\n", "Stop Time ", unixTime2 - unixTime1);
}

///////////////////////////////////////////////
// read
void GuiCheats::searchMemoryValuesPrimary(Debugger *debugger, searchType_t searchType, searchMode_t searchMode, searchRegion_t searchRegion, MemoryDump **displayDump, std::vector<MemoryInfo> memInfos)
{
  bool ledOn = false;

  searchValue_t zeroValue;
  zeroValue._u64 = 0;
  // printf("%s\n", "searchMemoryValuesPrimary");
  // printf("%s\n", titleNameStr.c_str());
  // printf("%s\n", tidStr.c_str());
  // printf("%s\n", buildIDStr.c_str());
  // printf("%s%lx\n", "m_addressSpaceBaseAddr ", m_addressSpaceBaseAddr);
  // printf("%s%lx\n", "m_heapBaseAddr ", m_heapBaseAddr);
  // printf("%s%lx\n", "m_mainBaseAddr ", m_mainBaseAddr);
  // printf("%s%lx\n", "m_heapSize ", m_heapSize);
  // printf("%s%lx\n", "m_mainSize ", m_mainSize);
  // printf("%s%X1\n", "searchType ", searchType);
  // printf("%s%X1\n", "searchMode ", searchMode);
  // printf("%s%X1\n", "searchRegion ", searchRegion);
  (new Snackbar("Dumping memory"))->show();
  (*displayDump) = new MemoryDump(EDIZON_DIR "/memdump1.dat", DumpType::DATA, true);
  (*displayDump)->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
  (*displayDump)->setSearchParams(searchType, searchMode, searchRegion, {0}, {0});
  // start time
  time_t unixTime1 = time(NULL);
  printf("%s%lx\n", "Start Time ", unixTime1);

  for (MemoryInfo meminfo : memInfos)
  {
    if (searchRegion == SEARCH_REGION_HEAP && meminfo.type != MemType_Heap)
      continue;
    else if (searchRegion == SEARCH_REGION_MAIN &&
             (meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_HEAP_AND_MAIN &&
             (meminfo.type != MemType_Heap && meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_RAM && (meminfo.perm & Perm_Rw) != Perm_Rw)
      continue;

    setLedState(ledOn);
    ledOn = !ledOn;
    // printf("%s%lx\n", "meminfo.size ", meminfo.size);
    // printf("%s%lx\n", "meminfo.addr ", meminfo.addr);
    // printf("%s%lx\n", "meminfo.type ", meminfo.type);
    // printf("%s%lx\n", "meminfo.perm ", meminfo.perm);

    u64 offset = 0;
    u64 bufferSize = MAX_BUFFER_SIZE; // hack increase from 40K to 1M
    u8 *buffer = new u8[bufferSize];
    while (offset < meminfo.size)
    {

      if (meminfo.size - offset < bufferSize)
        bufferSize = meminfo.size - offset;

      debugger->readMemory(buffer, bufferSize, meminfo.addr + offset);
      (*displayDump)->addData(buffer, bufferSize);

      offset += bufferSize;
    }

    delete[] buffer;
  }

  setLedState(false);
  (*displayDump)->flushBuffer();
  // end time
  time_t unixTime2 = time(NULL);
  printf("%s%lx\n", "Stop Time ", unixTime2);
  printf("%s%ld\n", "Stop Time ", unixTime2 - unixTime1);
}

////////////////////////////////////////////////////
void GuiCheats::searchMemoryValuesSecondary(Debugger *debugger, searchType_t searchType, searchMode_t searchMode, searchRegion_t searchRegion, MemoryDump **displayDump, std::vector<MemoryInfo> memInfos)
{
  bool ledOn = false;
  searchValue_t oldValue = {0}; // check if needed
  searchValue_t newValue = {0};

  MemoryDump *newMemDump = new MemoryDump(EDIZON_DIR "/datadump2.dat", DumpType::DATA, true); // Store Current value
  MemoryDump *addrDump = new MemoryDump(EDIZON_DIR "/memdump3.dat", DumpType::ADDR, true);
  addrDump->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
  addrDump->setSearchParams(searchType, searchMode, searchRegion, {0}, {0});

  // work in progress
  // if (searchMode == SEARCH_MODE_DIFFA)
  MemoryDump *valueDumpA = new MemoryDump(EDIZON_DIR "/datadumpA.dat", DumpType::DATA, true); // file to put A
  MemoryDump *valueDumpB = new MemoryDump(EDIZON_DIR "/datadumpB.dat", DumpType::DATA, true); // file to put B
  if ((searchMode == SEARCH_MODE_SAMEA) || (searchMode == SEARCH_MODE_DIFFA))
  {
    (new Snackbar("Creating state B"))->show();
  }
  // end work in progress

  u64 dumpoffset = 0; // file offset need to be for whole session

  // start time
  time_t unixTime1 = time(NULL);
  printf("%s%lx\n", "Start Time second search ", unixTime1);
  // helper init
  MemoryDump *helperDump = new MemoryDump(EDIZON_DIR "/memdump1a.dat", DumpType::ADDR, true); // has address, size, count for fetching buffer from memory
  helperinfo_t helperinfo;

  for (MemoryInfo meminfo : memInfos)
  {
    if (searchRegion == SEARCH_REGION_HEAP && meminfo.type != MemType_Heap)
      continue;
    else if (searchRegion == SEARCH_REGION_MAIN &&
             (meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_HEAP_AND_MAIN &&
             (meminfo.type != MemType_Heap && meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable))
      continue;
    else if (searchRegion == SEARCH_REGION_RAM && (meminfo.perm & Perm_Rw) != Perm_Rw)
      continue;

    setLedState(ledOn);
    ledOn = !ledOn;
    printf("%s%lx\n", "meminfo.size ", meminfo.size);
    printf("%s%lx\n", "meminfo.addr ", meminfo.addr);
    printf("%s%lx\n", "meminfo.type ", meminfo.type);
    printf("%s%lx\n", "meminfo.perm ", meminfo.perm);
    u64 offset = 0;
    u64 bufferSize = MAX_BUFFER_SIZE; // hack increase from 40K to 1M
    u8 *buffer = new u8[bufferSize];
    u8 *filebuffer = new u8[bufferSize]; //added filebuffer matching memory buffer memory buffer could be smaller, let's see if that is too much
    u64 addr = meminfo.addr;

    // start count
    helperinfo.count = 0;

    while (offset < meminfo.size)
    {
      setLedState(ledOn);
      ledOn = !ledOn;

      if (meminfo.size - offset < bufferSize)
        bufferSize = meminfo.size - offset;

      debugger->readMemory(buffer, bufferSize, meminfo.addr + offset);
      // printf("%s\n", "readmemory OK ");
      // printf("%s%lx\n", "dumpoffset ", dumpoffset);
      // printf("%s%lx\n", "bufferSize ", bufferSize);
      // printf("%s%lx\n", "displayDump ", displayDump);
      // print_details = true;
      (*displayDump)->getData(dumpoffset, filebuffer, bufferSize);
      // print_details = false;
      // printf("%s\n", "readdata OK ");

      for (u64 i = 0; i < bufferSize; i += dataTypeSizes[searchType])
      {
        switch (dataTypeSizes[searchType])
        {
        case 1:
          newValue._u8 = *reinterpret_cast<u8 *>(&buffer[i]);
          oldValue._u8 = *reinterpret_cast<u8 *>(&filebuffer[i]);
        case 2:
          newValue._u16 = *reinterpret_cast<u16 *>(&buffer[i]);
          oldValue._u16 = *reinterpret_cast<u16 *>(&filebuffer[i]);
        case 4:
          newValue._u32 = *reinterpret_cast<u32 *>(&buffer[i]);
          oldValue._u32 = *reinterpret_cast<u32 *>(&filebuffer[i]);
        case 8:
          newValue._u64 = *reinterpret_cast<u64 *>(&buffer[i]);
          oldValue._u64 = *reinterpret_cast<u64 *>(&filebuffer[i]);
        }
        switch (searchMode)
        {
        case SEARCH_MODE_SAME:
          if (newValue._u64 == oldValue._u64)
          {
            addrDump->addData((u8 *)&addr, sizeof(u64));
            newMemDump->addData((u8 *)&newValue, sizeof(u64));
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_DIFF:
          if (newValue._u64 != oldValue._u64)
          {
            addrDump->addData((u8 *)&addr, sizeof(u64));
            newMemDump->addData((u8 *)&newValue, sizeof(u64));
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_SAMEA:
        case SEARCH_MODE_DIFFA:
          if (newValue._u64 != oldValue._u64)
          {
            // (new Snackbar("Creating state A (previsou) and state B (current) "))->show();
            addrDump->addData((u8 *)&addr, sizeof(u64));
            newMemDump->addData((u8 *)&newValue, sizeof(u64)); // Keep compatibility with other mode
            valueDumpA->addData((u8 *)&oldValue, sizeof(u64)); // save state A
            valueDumpB->addData((u8 *)&newValue, sizeof(u64)); // save state B
            helperinfo.count++;
          }
          break;
        case SEARCH_MODE_INC:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (newValue._s64 > oldValue._s64)
            {
              addrDump->addData((u8 *)&addr, sizeof(u64));
              newMemDump->addData((u8 *)&newValue, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (newValue._u64 > oldValue._u64)
            {
              addrDump->addData((u8 *)&addr, sizeof(u64));
              newMemDump->addData((u8 *)&newValue, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        case SEARCH_MODE_DEC:
          if (searchType & (SEARCH_TYPE_SIGNED_8BIT | SEARCH_TYPE_SIGNED_16BIT | SEARCH_TYPE_SIGNED_32BIT | SEARCH_TYPE_SIGNED_64BIT | SEARCH_TYPE_FLOAT_32BIT | SEARCH_TYPE_FLOAT_64BIT))
          {
            if (newValue._s64 < oldValue._s64)
            {
              addrDump->addData((u8 *)&addr, sizeof(u64));
              newMemDump->addData((u8 *)&newValue, sizeof(u64));
              helperinfo.count++;
            }
          }
          else
          {
            if (newValue._u64 < oldValue._u64)
            {
              addrDump->addData((u8 *)&addr, sizeof(u64));
              newMemDump->addData((u8 *)&newValue, sizeof(u64));
              helperinfo.count++;
            }
          }
          break;
        }
        addr += dataTypeSizes[searchType];
      }
      // end compare
      // helper info write must be before inc
      helperinfo.address = meminfo.addr + offset;
      helperinfo.size = bufferSize;
      if (helperinfo.count != 0)
        helperDump->addData((u8 *)&helperinfo, sizeof(helperinfo));
      printf("%s%lx\n", "helperinfo.address ", helperinfo.address);
      printf("%s%lx\n", "helperinfo.size ", helperinfo.size);
      printf("%s%lx\n", "helperinfo.count ", helperinfo.count);
      helperinfo.count = 0; // must be after write
                            // end

      offset += bufferSize;
      dumpoffset += bufferSize;

      printf("%s%lx\n", "offset ", offset);
      printf("%s%lx\n", "dumpoffset ", dumpoffset);
    }

    delete[] buffer;
    delete[] filebuffer;
  }
  newMemDump->flushBuffer();
  addrDump->flushBuffer();
  helperDump->flushBuffer();
  valueDumpA->flushBuffer();
  valueDumpB->flushBuffer();
  delete newMemDump; // this should close these two files
  delete addrDump;
  delete helperDump;
  delete valueDumpA;
  delete valueDumpB;

  // old maybe useless stuff to delete later
  // Bigger buffers
  // for (u64 addr = 0; addr < std::min((*displayDump)->size(), newMemDump->size()); addr += dataTypeSizes[searchType])
  // {
  //   searchValue_t oldValue = {0};
  //   searchValue_t newValue = {0};
  //   (*displayDump)->getData(addr, &oldValue, dataTypeSizes[searchType]);
  //   newMemDump->getData(addr, &newValue, dataTypeSizes[searchType]);
  // }

  setLedState(false);

  // end time second search
  time_t unixTime2 = time(NULL);
  printf("%s%lx\n", "Stop Time second search", unixTime2);
  printf("%s%ld\n", "Total Time in decimal seconds  ", unixTime2 - unixTime1);
}

void GuiCheats::searchMemoryValuesTertiary(Debugger *debugger, searchValue_t searchValue1, searchValue_t searchValue2, searchType_t searchType, searchMode_t searchMode, searchRegion_t searchRegion, MemoryDump **displayDump, std::vector<MemoryInfo> memInfos)
{
  MemoryDump *oldvalueDump = new MemoryDump(EDIZON_DIR "/datadump2.dat", DumpType::DATA, false); //file with previous value
  MemoryDump *newvalueDump = new MemoryDump(EDIZON_DIR "/datadump4.dat", DumpType::DATA, true);  // file to put new value

  //work in progress
  // if (searchMode == SEARCH_MODE_SAMEA)
  MemoryDump *valueDumpA = new MemoryDump(EDIZON_DIR "/datadumpA.dat", DumpType::DATA, false);    // file to get A
  MemoryDump *newvalueDumpA = new MemoryDump(EDIZON_DIR "/datadumpAa.dat", DumpType::DATA, true); // file to put new A
  MemoryDump *valueDumpB = new MemoryDump(EDIZON_DIR "/datadumpB.dat", DumpType::DATA, false);    // file to get B
  MemoryDump *newvalueDumpB = new MemoryDump(EDIZON_DIR "/datadumpBa.dat", DumpType::DATA, true); // file to put new B
  bool no_existing_dump = false;
  if ((searchMode == SEARCH_MODE_SAMEA) || (searchMode == SEARCH_MODE_DIFFA))
  {
    if (valueDumpA->size() == oldvalueDump->size())
    {
      delete oldvalueDump;
      oldvalueDump = valueDumpA;
    }
    else
    {
      // delete valueDumpB;
      // valueDumpB = oldvalueDump;
      no_existing_dump = true;
      printf("no existing dump \n");
      if (searchMode == SEARCH_MODE_SAMEA)
        return;
    }
  }

  // create a A and B file valueDumpA and newvalueDumpA ?? to keep track of A B;
  //end work in progress
  MemoryDump *newDump = new MemoryDump(EDIZON_DIR "/memdump3.dat", DumpType::ADDR, true); //file to put new candidates
  newDump->setBaseAddresses(m_addressSpaceBaseAddr, m_heapBaseAddr, m_mainBaseAddr, m_heapSize, m_mainSize);
  newDump->setSearchParams(searchType, searchMode, searchRegion, {0}, {0});
  bool ledOn = false;
  //begin
  time_t unixTime1 = time(NULL);
  printf("%s%lx\n", "Start Time Tertiary search", unixTime1);

  u64 offset = 0;
  u64 bufferSize = MAX_BUFFER_SIZE; // this is for file access going for 1M
  bool have_oldvalue = false;
  u8 *buffer = new u8[bufferSize];
  u8 *valuebuffer = new u8[bufferSize];
  u8 *valueBbuffer = new u8[bufferSize];

  // BM7
  // helper init
  MemoryDump *helperDump = new MemoryDump(EDIZON_DIR "/memdump1a.dat", DumpType::ADDR, false);   // has address, size, count for fetching buffer from memory
  MemoryDump *newhelperDump = new MemoryDump(EDIZON_DIR "/memdump3a.dat", DumpType::ADDR, true); // has address, size, count for fetching buffer from memory
  if (helperDump->size() == 0)
  {
    (new Snackbar("Helper file not found !"))->show();
    return;
  }

  // helper integrity check
  if (true)
  {
    printf("start helper integrity check value tertiary  \n");
    u32 helpercount = 0;
    helperinfo_t helperinfo;
    for (u64 i = 0; i < helperDump->size(); i += sizeof(helperinfo))
    {
      helperDump->getData(i, &helperinfo, sizeof(helperinfo));
      helpercount += helperinfo.count;
    }
    if (helpercount != (*displayDump)->size() / sizeof(u64))
    {
      printf("Integrity problem with helper file helpercount = %d  memdumpsize = %d \n", helpercount, (*displayDump)->size() / sizeof(u64));
      (new Snackbar("Helper integrity check failed !"))->show();
      return;
    }
    printf("end helper integrity check value tertiary \n");
  }
  // end helper integrity check

  u8 *ram_buffer = new u8[bufferSize];
  u64 helper_offset = 0;
  helperinfo_t helperinfo;
  helperinfo_t newhelperinfo;
  newhelperinfo.count = 0;
  helperDump->getData(helper_offset, &helperinfo, sizeof(helperinfo)); // helper_offset+=sizeof(helperinfo)
  printf("%s%lx\n", "helperinfo.address ", helperinfo.address);
  printf("%s%lx\n", "helperinfo.size ", helperinfo.size);
  printf("%s%lx\n", "helperinfo.count ", helperinfo.count);
  printf("%s%lx\n", "helper_offset ", helper_offset);
  debugger->readMemory(ram_buffer, helperinfo.size, helperinfo.address);
  // helper init end

  if (oldvalueDump->size() == (*displayDump)->size())
  {
    printf("%s\n", "Found old value");
    have_oldvalue = true;
  }
  else
  {
    (new Snackbar("previous value file not found !"))->show();
    return; /* code */
  }

  searchValue_t value = {0};
  searchValue_t oldvalue = {0};
  searchValue_t Bvalue = {0};

  u64 address = 0;
  while (offset < (*displayDump)->size())
  {

    if ((*displayDump)->size() - offset < bufferSize)
      bufferSize = (*displayDump)->size() - offset;

    (*displayDump)->getData(offset, buffer, bufferSize); // BM6
    if (have_oldvalue)
      oldvalueDump->getData(offset, valuebuffer, bufferSize);
    if ((searchMode == SEARCH_MODE_SAMEA) || (searchMode == SEARCH_MODE_DIFFA)) //read in data A and B
    {
      if (no_existing_dump == false)
        valueDumpB->getData(offset, valueBbuffer, bufferSize);
    }

    printf("%s\n", "buffer loaded");
    for (u64 i = 0; i < bufferSize; i += sizeof(u64)) // for (size_t i = 0; i < (bufferSize / sizeof(u64)); i++)
    {
      if (helperinfo.count == 0)
      {
        if (newhelperinfo.count != 0)
        {
          newhelperinfo.address = helperinfo.address;
          newhelperinfo.size = helperinfo.size;
          newhelperDump->addData((u8 *)&newhelperinfo, sizeof(newhelperinfo));
          newhelperinfo.count = 0;
        };
        helper_offset += sizeof(helperinfo);
        helperDump->getData(helper_offset, &helperinfo, sizeof(helperinfo));
        debugger->readMemory(ram_buffer, helperinfo.size, helperinfo.address);
        printf("%s%lx\n", "helperinfo.address ", helperinfo.address);
        printf("%s%lx\n", "helperinfo.size ", helperinfo.size);
        printf("%s%lx\n", "helperinfo.count ", helperinfo.count);
        printf("%s%lx\n", "helper_offset ", helper_offset);
      }

      address = *reinterpret_cast<u64 *>(&buffer[i]);
      oldvalue._u64 = *reinterpret_cast<u64 *>(&valuebuffer[i]);
      if ((searchMode == SEARCH_MODE_SAMEA) || (searchMode == SEARCH_MODE_DIFFA)) //read in data A and B
      {
        if (no_existing_dump == false)
          Bvalue._u64 = *reinterpret_cast<u64 *>(&valueBbuffer[i]);
      }

      // fetch value from buffer
      // ram_buffer + i == &ram_buffer[i]
      // value._u64 = 0;
      memset(&value, 0, 8);
      memcpy(&value, ram_buffer + address - helperinfo.address, dataTypeSizes[searchType]);
      helperinfo.count--;

      // searchValue_t *foobar = reinterpret_cast<searchValue_t *>(ram_buffer + (address - helperinfo.address))
      //_u32 bar = (*foobar)._u32;
      //(reinterpret_cast<searchValue_t *>(ram_buffer + (address - helperinfo.address)))._u32

      // debugger->readMemory(&value, dataTypeSizes[searchType], address);

      if (i % 10000 == 0)
      {
        setLedState(ledOn);
        ledOn = !ledOn;
      }

      switch (searchMode)
      {
      case SEARCH_MODE_SAME:
        if (value._s64 == oldvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_SAMEA:
        if (no_existing_dump)
        {
          printf("this shouldn't happen\n");
          if (value._s64 != Bvalue._s64) //change
          {
            newDump->addData((u8 *)&address, sizeof(u64));
            newvalueDump->addData((u8 *)&value, sizeof(u64));
            newvalueDumpA->addData((u8 *)&value, sizeof(u64));
            // newvalueDumpA->addData((u8 *)&oldvalue, sizeof(u64));
            newvalueDumpB->addData((u8 *)&Bvalue, sizeof(u64));
            newhelperinfo.count++;
          }
        }
        else if (value._s64 == oldvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newvalueDumpA->addData((u8 *)&oldvalue, sizeof(u64));
          newvalueDumpB->addData((u8 *)&Bvalue, sizeof(u64)); //create new file and later rename to A, need this new file for size of A to be in sync
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DIFFA: //need to be same as B
        if (no_existing_dump)
        {
          if (value._s64 != oldvalue._s64) // change
          {
            newDump->addData((u8 *)&address, sizeof(u64));
            newvalueDump->addData((u8 *)&value, sizeof(u64));
            newvalueDumpA->addData((u8 *)&oldvalue, sizeof(u64));
            newvalueDumpB->addData((u8 *)&value, sizeof(u64));
            // newvalueDumpB->addData((u8 *)&Bvalue, sizeof(u64));
            newhelperinfo.count++;
          }
        }
        else if (value._s64 == Bvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newvalueDumpA->addData((u8 *)&oldvalue, sizeof(u64));
          newvalueDumpB->addData((u8 *)&Bvalue, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DIFF:
        if (value._s64 != oldvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_INC:
        if (value._s64 > oldvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_DEC:
        if (value._s64 < oldvalue._s64)
        {
          newDump->addData((u8 *)&address, sizeof(u64));
          newvalueDump->addData((u8 *)&value, sizeof(u64));
          newhelperinfo.count++;
        }
        break;
      case SEARCH_MODE_NONE:
        break;
      }
    }

    offset += bufferSize;
    // update newhelperinfo

    printf("%s%lx%s%lx\n", "(*displayDump)->size() ", (*displayDump)->size(), "Offset ", offset);
  }

  if (newhelperinfo.count != 0) // need to take care of the last one
  {
    newhelperinfo.address = helperinfo.address;
    newhelperinfo.size = helperinfo.size;
    newhelperDump->addData((u8 *)&newhelperinfo, sizeof(newhelperinfo));
    newhelperinfo.count = 0;
  };
  newDump->flushBuffer();
  newvalueDump->flushBuffer();
  //end
  // should just rename the file ??
  if (newDump->size() > 0)
  {
    printf("%s%lx\n", "newDump->size() ", newDump->size());
  }
  else
  {
    (new Snackbar("None of values changed to the entered one!"))->show();
  }

  setLedState(false);
  delete[] ram_buffer;
  delete[] valuebuffer;
  delete[] valueBbuffer;
  delete[] buffer;
  time_t unixTime2 = time(NULL);
  printf("%s%lx\n", "Stop Time Tertiary search ", unixTime2);
  printf("%s%ld\n", "Stop Time ", unixTime2 - unixTime1);

  newvalueDump->flushBuffer();
  newDump->flushBuffer();
  newhelperDump->flushBuffer();
  newvalueDumpA->flushBuffer();
  newvalueDumpB->flushBuffer();

  delete newvalueDump;
  delete newDump;
  delete newhelperDump;
  delete newvalueDumpA;
  delete newvalueDumpB;

  delete oldvalueDump; //needed to close the file
  delete helperDump;
  delete valueDumpB;

  printf("Done Tertiary \n");
  // remove(EDIZON_DIR "/memdump3.dat");
}

// here

void GuiCheats::pointercheck()
{
  printf("checking pointer...\n");
  m_pointeroffsetDump = new MemoryDump(EDIZON_DIR "/ptrdump1.dat", DumpType::POINTER, false);
  if (m_pointeroffsetDump->size() > 0)
  {
    u64 offset = 0;
    u64 bufferSize = MAX_BUFFER_SIZE;
    u8 *buffer = new u8[bufferSize];
    pointer_chain_t pointer_chain;
    while (offset < m_pointeroffsetDump->size())
    {
      if (m_pointeroffsetDump->size() - offset < bufferSize)
        bufferSize = m_pointeroffsetDump->size() - offset;
      m_pointeroffsetDump->getData(offset, buffer, bufferSize);
      for (u64 i = 0; i < bufferSize; i += sizeof(pointer_chain_t))
      {
        pointer_chain_t pointer_chain = *reinterpret_cast<pointer_chain_t *>(&buffer[i]);
        u64 nextaddress = m_mainBaseAddr;
        printf("main[%lx]", nextaddress);
        // m_debugger->readMemory(&nextaddress, sizeof(u64), ( m_mainBaseAddr+ pointer_chain.offset[pointer_chain.depth]));
        // printf("(&lx)", nextaddress);
        for (int z = pointer_chain.depth; z >= 0; z--)
        {
          printf("+%lx z=%d ", pointer_chain.offset[z], z);
          nextaddress += pointer_chain.offset[z];
          printf("[%lx]", nextaddress);
          m_debugger->readMemory(&nextaddress, sizeof(u64), nextaddress);
          printf("(%lx)", nextaddress);
        }
        printf("\n\n");
      }
      offset += bufferSize;
    }
    delete[] buffer;
  }
  else
  {
    printf("no saved poiters\n");
  }
}

void GuiCheats::startpointersearch(u64 targetaddress) //, MemoryDump **displayDump, MemoryDump **dataDump, pointer_chain_t pointerchain)
{
  m_dataDump = new MemoryDump(EDIZON_DIR "/datadump2.dat", DumpType::DATA, false);           // pointed targets is in this file
  m_pointeroffsetDump = new MemoryDump(EDIZON_DIR "/ptrdump1.dat", DumpType::POINTER, true); // create file but maybe later just open it
  pointer_chain_t pointerchain;
  printf("check point 1\n");
  pointerchain.depth = 0;
  try
  {
    pointersearch(targetaddress, pointerchain); //&m_memoryDump, &m_dataDump,
  }
  catch (...)
  {
    printf("Caught an exception\n");
  }
  // add some rubbish just for testing
  // char st[250];                                         // replace the printf
  // snprintf(st, 250, "Just for testing ====="); //
  // m_pointeroffsetDump->addData((u8 *)&st, sizeof(st)); //

  m_pointeroffsetDump->flushBuffer();
  delete m_pointeroffsetDump;
}

void GuiCheats::pointersearch(u64 targetaddress, struct pointer_chain_t pointerchain) //MemoryDump **displayDump, MemoryDump **dataDump,
{
  // printf("target address = %lx depth = %d \n", targetaddress, pointerchain.depth);

  // printf("check point 1a\n");
  if ((m_mainBaseAddr <= targetaddress) && (targetaddress <= (m_mainBaseAddr + m_mainSize)))
  {
    printf("\ntarget reached!=========================\n");
    printf("final offset is %lx \n", targetaddress - m_mainBaseAddr);
    // pointerchain.depth++;
    // pointerchain.offset[pointerchain.depth] = targetaddress - m_mainBaseAddr;
    //   // save pointerchain
    pointerchain.offset[pointerchain.depth] = targetaddress - m_mainBaseAddr;
    m_pointeroffsetDump->addData((u8 *)&pointerchain, sizeof(pointer_chain_t));
    m_pointeroffsetDump->flushBuffer(); // is this useful?
    printf("main");
    for (int z = pointerchain.depth; z >= 0; z--)
      printf("+%lx z=%d ", pointerchain.offset[z], z);
    printf("\n\n");
    // printf("\nsize=%d\n", sizeof(pointer_chain_t));
    return; // consider don't return to find more
  };

  if (pointerchain.depth == MAX_POINTER_DEPTH)
  {
    // printf("max pointer depth reached\n\n");
    return;
  }

  // printf("\n starting pointer search for address = %lx at depth %d ", targetaddress, pointerchain.depth);
  u64 offset = 0;
  u64 thefileoffset = 0;
  u64 bufferSize = MAX_BUFFER_SIZE;
  u8 *buffer = new u8[bufferSize];
  u64 distance;
  u64 minimum = MAX_POINTER_RANGE;   // a large number to start
  std::vector<sourceinfo_t> sources; // potential sources that points at target with a offset, we will search for the nearest address being pointed by pointer/pointers
  sourceinfo_t sourceinfo;
  // std::vector<u64> distances;

  while (offset < m_dataDump->size())
  {
    if (m_dataDump->size() - offset < bufferSize)
      bufferSize = m_dataDump->size() - offset;
    // printf("checkpoint 2\n");
    m_dataDump->getData(offset, buffer, bufferSize); // BM4
    bool writeback = false;
    // printf("checkpoint 3\n");
    // return;                                           // just to check
    for (u64 i = 0; i < bufferSize; i += sizeof(u64)) // for (size_t i = 0; i < (bufferSize / sizeof(u64)); i++)
    {
      u64 pointedaddress = *reinterpret_cast<u64 *>(&buffer[i]);
      if (targetaddress >= pointedaddress)
      {
        distance = targetaddress - pointedaddress;
        if (distance < minimum)
        {
          // minimum = distance;
          // sources.clear();
          sourceinfo.foffset = offset + i;
          sourceinfo.offset = distance;
          sources.push_back(sourceinfo);
          thefileoffset = offset + i;
          // *reinterpret_cast<u64 *>(&buffer[i]) = 0; // to prevent endless loop
          // writeback = true;                         //
        }
        else if (distance == minimum)
        {
          sourceinfo.foffset = offset + i;
          sourceinfo.offset = distance;
          sources.push_back(sourceinfo);
          // sources.push_back(offset + i);
          thefileoffset = offset + i;
          // *reinterpret_cast<u64 *>(&buffer[i]) = 0; // to prevent endless loop
          // writeback = true;                         //
          // pointerchain.fileoffset[pointerchain.depth] = offset + i;
          // pointerchain.offset[pointerchain.depth] = distance;
        }
      }
    }
    // if (writeback)
    // {
    //   m_dataDump->putData(offset, buffer, bufferSize);
    //   m_dataDump->flushBuffer();
    // }
    offset += bufferSize;
  }
  delete[] buffer; // release memory use for the search of sources

  // Now we have fileoffsets stored in sources to repeat this process
  // printf("memory scan completed offset is %lx at depth %lx\n\n", minimum, pointerchain.depth);
  // pointerchain.offset[pointerchain.depth] = minimum;
  pointerchain.depth++;

  // printf("**Found %d sources \n", sources.size());
  for (sourceinfo_t sourceinfo : sources)
  {
    // targetaddress = 0x1000;
    // printf("size of memorydump is %lx ", m_memoryDump1->size()); // I swapped the bookmark
    //m_memoryDump->getData((m_selectedEntry + m_addresslist_offset) * sizeof(u64), &m_EditorBaseAddr, sizeof(u64));
    u64 newtargetaddress;
    m_memoryDump1->getData(sourceinfo.foffset, &newtargetaddress, sizeof(u64)); // fileoffset is in byte

    // u64 checkaddress;                                             // debug use
    // m_dataDump->getData(foffset, &checkaddress, sizeof(u64));     //double check it for debug purpose
    // printf("fileoffset = %lx thefileoffset =%lx new target address is %lx old target was %lx\n", sourceinfo.foffset, thefileoffset, newtargetaddress, targetaddress);
    if (m_forwardonly)
    {
      if ((targetaddress > newtargetaddress) || ((m_mainBaseAddr <= newtargetaddress) && (newtargetaddress <= (m_mainBaseAddr + m_mainSize))))
      {
        pointerchain.fileoffset[pointerchain.depth - 1] = sourceinfo.foffset;
        pointerchain.offset[pointerchain.depth - 1] = sourceinfo.offset;
        pointersearch(newtargetaddress, pointerchain);
      }
    }
    else
    {
      /* code */
      pointerchain.fileoffset[pointerchain.depth - 1] = sourceinfo.foffset;
      pointerchain.offset[pointerchain.depth - 1] = sourceinfo.offset;
      pointersearch(newtargetaddress, pointerchain);
    }
  }

  return;

  // (*displayDump)->getData(pointerchain.fileoffset[pointerchain.depth] * sizeof(u64), &address, sizeof(u64));

  // printf("depth is %d new address is %lx offset is %lx code offset is %lx \n", pointerchain.depth, address, pointerchain.fileoffset[pointerchain.depth], pointerchain.offset[pointerchain.depth]);
  // if (address < m_mainBaseAddr + m_mainSize)
  // {
  //   printf("target reached!");
  //   printf("final offset is %lx \n", address - m_mainBaseAddr);
  //   pointerchain.depth++;
  //   pointerchain.offset[pointerchain.depth] = address - m_mainBaseAddr;
  //   // save pointerchain
  //   m_pointeroffsetDump->addData((u8 *)&pointerchain, sizeof(pointer_chain_t));
  //   return;
}
// change address to new one

// printf("not found \n");
// return;

// m_targetmemInfos.clear();
// m_target = address;
// m_max_depth = depth;
// m_maxrange = range;
// m_numoffset = num;

// std::vector<MemoryInfo> mainInfos;
// mainInfos.clear();
// m_low_main_heap_addr = 0x100000000000;
// m_high_main_heap_addr = 0;

// for (MemoryInfo meminfo : m_memoryInfo)
// {
//   // if (m_searchRegion == SEARCH_REGION_RAM)
//   //   if ((meminfo.perm & Perm_Rw) != Perm_Rw) continue; else
//   if (meminfo.type != MemType_Heap && meminfo.type != MemType_CodeWritable && meminfo.type != MemType_CodeMutable)
//     continue;

//   if (meminfo.addr < m_low_main_heap_addr)
//     m_low_main_heap_addr = meminfo.addr;

//   if ((meminfo.addr + meminfo.size) > m_high_main_heap_addr)
//     m_high_main_heap_addr = (meminfo.addr + meminfo.size);

//   m_targetmemInfos.push_back(meminfo);

//   if (meminfo.type == MemType_CodeWritable || meminfo.type == MemType_CodeMutable)
//   {
//     mainInfos.push_back(meminfo);
//     //
//     printf("%s%p", "meminfo.addr, ", meminfo.addr);
//     printf("%s%p", ", meminfo.end, ", meminfo.addr + meminfo.size);
//     printf("%s%p", ", meminfo.size, ", meminfo.size);
//     printf("%s%lx", ", meminfo.type, ", meminfo.type);
//     printf("%s%lx", ", meminfo.attr, ", meminfo.attr);
//     printf("%s%lx", ", meminfo.perm, ", meminfo.perm);
//     printf("%s%lx", ", meminfo.device_refcount, ", meminfo.device_refcount);
//     printf("%s%lx\n", ", meminfo.ipc_refcount, ", meminfo.ipc_refcount);
//     //
//   }
// }

// m_Time1 = time(NULL);
// printf("searching pointer for address %lx\n Range %lx .. %lx ", m_target, m_low_main_heap_addr, m_high_main_heap_addr);
// for (u8 i = 0; i < 20; i++)
//   m_hitcount.offset[i] = 0;

// for (MemoryInfo meminfo : mainInfos)
// {
//   if (meminfo.addr < m_mainBaseAddr)
//     continue;
//   pointer_chain_t ptrchain;
//   ptrchain.offset[0] = meminfo.addr - m_mainBaseAddr;
//   ptrchain.depth = 0;
//   printf("offset %lx \n ", ptrchain.offset[0]);
//   //
//   printf("%s%p", "meminfo.addr, ", meminfo.addr);
//   printf("%s%p", ", meminfo.end, ", meminfo.addr + meminfo.size);
//   printf("%s%p", ", meminfo.size, ", meminfo.size);
//   printf("%s%lx", ", meminfo.type, ", meminfo.type);
//   printf("%s%lx", ", meminfo.attr, ", meminfo.attr);
//   printf("%s%lx", ", meminfo.perm, ", meminfo.perm);
//   printf("%s%lx", ", meminfo.device_refcount, ", meminfo.device_refcount);
//   printf("%s%lx\n", ", meminfo.ipc_refcount, ", meminfo.ipc_refcount);
//   //
//   // return;
//   printf("Top level meminfo.addr %lx\n time= %d\n", meminfo.addr, time(NULL) - m_Time1);
//   searchpointer(meminfo.addr, meminfo.size / sizeof(u64), meminfo.size, ptrchain);
//   //
//   printf("hit count depth");
//   for (u8 i = 0; i < 20; i++)
//     printf("%d= %d ", i, m_hitcount.offset[i]);

void GuiCheats::searchpointer(u64 address, u64 depth, u64 range, struct pointer_chain_t pointerchain) //assumed range don't extend beyond a segment, need to make seperate call to cover multi segment
{
  // using global to reduce overhead
  // use separate function if need to get rid of range in the passed variable     // u64 m_max_depth; used in first call
  // u64 m_target;
  // u64 m_numoffset;
  // u64 m_maxrange;
  // u64 m_low_main_heap_addr; The lowerst of main or heap start
  // u64 m_high_main_heap_addr; The highest
  // printf("in function current depth is %d @@@@@@@@@@@@@@@@@@@@@\n", depth);
  // return;
  m_hitcount.offset[pointerchain.depth]++;

  if (address <= m_target && m_target <= address + range)
  {
    printf("found =========================");
    pointerchain.offset[pointerchain.depth] = m_target - address;
    pointerchain.depth++;
    m_pointeroffsetDump->addData((u8 *)&pointerchain, sizeof(pointer_chain_t)); //((u8 *)&address, sizeof(u64));
    // *m_pointeroffsetDump->getData(offset * sizeof(pointer_chain_t) , void *buffer, size_t bufferSize);
    printf("found at depth %d\n", pointerchain.depth);
    return;
  }
  if (depth == 0)
  {
    // printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n");
    return;
    // printf("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n");
  }
  pointerchain.depth++; // for all call
  depth--;              // for all call
  // u8 *buffer = new u8[range];
  u32 num = m_numoffset;
  u32 nextrange;
  u64 nextaddress;
  // u32 endaddress = address + range;
  // printf("I am at 1");
  u64 bufferSize = MAX_BUFFER_SIZE;
  if (range < bufferSize)
    bufferSize = range;
  u8 *buffer = new u8[bufferSize];
  // printf("I am at 2");
  for (MemoryInfo meminfo : m_targetmemInfos) // a shorten list that has only the real targets
  {
    if (address < meminfo.addr)
    {
      // printf("I am at 4");
      return; // address not accessible}
    }
    if (address > meminfo.addr + meminfo.size)
    {
      // printf("I am at 5, address =%lx meminfo.addr = %1x, meminfo.size =%1x \n", address, meminfo.addr, meminfo.size);
      continue; // next segment
    }
    u64 offset = 0;
    u64 segmentend = meminfo.addr + meminfo.size;
    // printf("I am at 3\n");
    while (address + offset < segmentend)
    {
      if (segmentend - (address + offset) < bufferSize)
        bufferSize = segmentend - (address + offset);

      // printf("reading address %lx bufferSize %lx meminfo.addr is %lx meminfo.size is %lx   ", (address + offset), bufferSize, meminfo.addr, meminfo.size);
      // printf("Time since last update %d \n", time(NULL) - m_Time1); //   printf("Top level meminfo.addr %lx\n time= %d\n", meminfo.addr, time(NULL) - m_Time1);
      // return;
      m_debugger->readMemory(buffer, bufferSize, (address + offset));
      for (u64 i = 0; i < bufferSize; i += sizeof(u64)) //for (u64 i = 0; i < bufferSize; i += dataTypeSizes[searchType])
      {
        nextaddress = *reinterpret_cast<u64 *>(&buffer[i]);
        // printf("nextaddress = %lx \n", nextaddress);
        if ((nextaddress >= m_low_main_heap_addr) && (nextaddress <= m_high_main_heap_addr))
        {
          // printf("found ptr === %lx ======================================= pointerchain.depth is %d ==============offset+i is  %d \n",nextaddress, pointerchain.depth, offset + i);
          pointerchain.offset[pointerchain.depth] = offset + i; // per call
          searchpointer(nextaddress, depth, m_max_range, pointerchain);
          num--;
          if (num == 0)
          {
            // printf("not found returning &&&&&&&&&&&&&&&&&&&&\n\n");
            return;
          }
        }
        range -= sizeof(u64);
        if (range == 0)
          return;
      }

      offset += bufferSize;
    }
  }
  delete[] buffer;
}

/**
 * Primary:
 *  Initial full memory dump regardless of type
 *  Differentiate between different regions and types
 * 
 * Secondary:
 *  Second full memory dump regardless of type
 *  Differentiate between regions and types. (both fix now)
 * 
 *  Compare both memory dumps based on type and mode
 *   Store match addresses into additional file
 *   Matches should be stored as [MEMADDR][DUMPADDR] for fast comparing later on
 * 
 * Tertiary (Loop infinitely):
 *  Iterate over match addrs file 
 *   Compare value in memory at [MEMADDR] with value in second memory dump at [DUMPADDR]
 *   Store match addresses into file (displayDump)
 *   Dump all values from changed addresses into a file
 *   Matches should be stored as [MEMADDR][DUMPADDR] for fast comparing later on
 */

static void _moveLonelyCheats(u8 *buildID, u64 titleID)
{
  std::stringstream lonelyCheatPath;
  std::stringstream realCheatPath;

  std::stringstream buildIDStr;

  for (u8 i = 0; i < 8; i++)
    buildIDStr << std::nouppercase << std::hex << std::setfill('0') << std::setw(2) << (u16)buildID[i];

  lonelyCheatPath << EDIZON_DIR "/cheats/" << buildIDStr.str() << ".txt";

  if (access(lonelyCheatPath.str().c_str(), F_OK) == 0)
  {
    realCheatPath << "/atmosphere/contents/" << std::uppercase << std::hex << std::setfill('0') << std::setw(sizeof(u64) * 2) << titleID;
    mkdir(realCheatPath.str().c_str(), 0777);
    realCheatPath << "/cheats/";
    mkdir(realCheatPath.str().c_str(), 0777);

    realCheatPath << buildIDStr.str() << ".txt";

    rename(lonelyCheatPath.str().c_str(), realCheatPath.str().c_str());

    (new MessageBox("A new cheat has been added for this title. \n Please restart the game to start using it.", MessageBox::OKAY))->show();
  }
}

static bool _wrongCheatsPresent(u8 *buildID, u64 titleID)
{
  std::stringstream ss;

  ss << "/atmosphere/contents/" << std::uppercase << std::hex << std::setfill('0') << std::setw(sizeof(u64) * 2) << titleID << "/cheats/";

  if (!std::filesystem::exists(ss.str()))
    return false;

  bool cheatsFolderEmpty = std::filesystem::is_empty(ss.str());

  for (u8 i = 0; i < 8; i++)
    ss << std::nouppercase << std::hex << std::setfill('0') << std::setw(2) << (u16)buildID[i];
  ss << ".txt";

  bool realCheatDoesExist = std::filesystem::exists(ss.str());

  return !(cheatsFolderEmpty || realCheatDoesExist);
}
